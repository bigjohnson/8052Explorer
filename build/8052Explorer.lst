                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 4.2.0 #13081 (MINGW64)
                                      4 ;--------------------------------------------------------
                                      5 	.module 8052Explorer
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _codice
                                     12 	.globl _acTestString
                                     13 	.globl _main
                                     14 	.globl _HELP
                                     15 	.globl _p
                                     16 	.globl _start
                                     17 	.globl _reset
                                     18 	.globl _hexCODE
                                     19 	.globl _dumpRAM
                                     20 	.globl _dumpCODE
                                     21 	.globl _hexEEPROM
                                     22 	.globl _dumpEEPROM
                                     23 	.globl _felix
                                     24 	.globl _printf_tiny
                                     25 	.globl _putchar
                                     26 	.globl _getchar
                                     27 	.globl _puts
                                     28 	.globl _init_timer0
                                     29 	.globl _ser_byte_avail
                                     30 	.globl _init_ser
                                     31 	.globl _writeEeprom
                                     32 	.globl _readEeprom
                                     33 	.globl _BREG_F7
                                     34 	.globl _BREG_F6
                                     35 	.globl _BREG_F5
                                     36 	.globl _BREG_F4
                                     37 	.globl _BREG_F3
                                     38 	.globl _BREG_F2
                                     39 	.globl _BREG_F1
                                     40 	.globl _BREG_F0
                                     41 	.globl _CY
                                     42 	.globl _AC
                                     43 	.globl _F0
                                     44 	.globl _RS1
                                     45 	.globl _RS0
                                     46 	.globl _OV
                                     47 	.globl _FL
                                     48 	.globl _P
                                     49 	.globl _TF2
                                     50 	.globl _EXF2
                                     51 	.globl _RCLK
                                     52 	.globl _TCLK
                                     53 	.globl _EXEN2
                                     54 	.globl _TR2
                                     55 	.globl _C_T2
                                     56 	.globl _CP_RL2
                                     57 	.globl _T2CON_7
                                     58 	.globl _T2CON_6
                                     59 	.globl _T2CON_5
                                     60 	.globl _T2CON_4
                                     61 	.globl _T2CON_3
                                     62 	.globl _T2CON_2
                                     63 	.globl _T2CON_1
                                     64 	.globl _T2CON_0
                                     65 	.globl _PT2
                                     66 	.globl _PS
                                     67 	.globl _PT1
                                     68 	.globl _PX1
                                     69 	.globl _PT0
                                     70 	.globl _PX0
                                     71 	.globl _RD
                                     72 	.globl _WR
                                     73 	.globl _T1
                                     74 	.globl _T0
                                     75 	.globl _INT1
                                     76 	.globl _INT0
                                     77 	.globl _TXD
                                     78 	.globl _RXD
                                     79 	.globl _P3_7
                                     80 	.globl _P3_6
                                     81 	.globl _P3_5
                                     82 	.globl _P3_4
                                     83 	.globl _P3_3
                                     84 	.globl _P3_2
                                     85 	.globl _P3_1
                                     86 	.globl _P3_0
                                     87 	.globl _EA
                                     88 	.globl _ET2
                                     89 	.globl _ES
                                     90 	.globl _ET1
                                     91 	.globl _EX1
                                     92 	.globl _ET0
                                     93 	.globl _EX0
                                     94 	.globl _P2_7
                                     95 	.globl _P2_6
                                     96 	.globl _P2_5
                                     97 	.globl _P2_4
                                     98 	.globl _P2_3
                                     99 	.globl _P2_2
                                    100 	.globl _P2_1
                                    101 	.globl _P2_0
                                    102 	.globl _SM0
                                    103 	.globl _SM1
                                    104 	.globl _SM2
                                    105 	.globl _REN
                                    106 	.globl _TB8
                                    107 	.globl _RB8
                                    108 	.globl _TI
                                    109 	.globl _RI
                                    110 	.globl _SCK
                                    111 	.globl _MISO
                                    112 	.globl _MOSI
                                    113 	.globl _SS
                                    114 	.globl _T2EX
                                    115 	.globl _T2
                                    116 	.globl _P1_7
                                    117 	.globl _P1_6
                                    118 	.globl _P1_5
                                    119 	.globl _P1_4
                                    120 	.globl _P1_3
                                    121 	.globl _P1_2
                                    122 	.globl _P1_1
                                    123 	.globl _P1_0
                                    124 	.globl _TF1
                                    125 	.globl _TR1
                                    126 	.globl _TF0
                                    127 	.globl _TR0
                                    128 	.globl _IE1
                                    129 	.globl _IT1
                                    130 	.globl _IE0
                                    131 	.globl _IT0
                                    132 	.globl _P0_7
                                    133 	.globl _P0_6
                                    134 	.globl _P0_5
                                    135 	.globl _P0_4
                                    136 	.globl _P0_3
                                    137 	.globl _P0_2
                                    138 	.globl _P0_1
                                    139 	.globl _P0_0
                                    140 	.globl _ALE
                                    141 	.globl _B
                                    142 	.globl _A
                                    143 	.globl _ACC
                                    144 	.globl _SPCR
                                    145 	.globl _PSW
                                    146 	.globl _TH2
                                    147 	.globl _TL2
                                    148 	.globl _RCAP2H
                                    149 	.globl _RCAP2L
                                    150 	.globl _T2MOD
                                    151 	.globl _T2CON
                                    152 	.globl _IP
                                    153 	.globl _P3
                                    154 	.globl _SPSR
                                    155 	.globl _IE
                                    156 	.globl _P2
                                    157 	.globl _SBUF
                                    158 	.globl _SCON
                                    159 	.globl _WMCON
                                    160 	.globl _P1
                                    161 	.globl _TH1
                                    162 	.globl _TH0
                                    163 	.globl _TL1
                                    164 	.globl _TL0
                                    165 	.globl _TMOD
                                    166 	.globl _TCON
                                    167 	.globl _PCON
                                    168 	.globl _SPDR
                                    169 	.globl _DP1H
                                    170 	.globl _DP1L
                                    171 	.globl _DP0H
                                    172 	.globl _DPH
                                    173 	.globl _DP0L
                                    174 	.globl _DPL
                                    175 	.globl _SP
                                    176 	.globl _P0
                                    177 	.globl _SADEN
                                    178 	.globl _IPH
                                    179 	.globl _SADDR
                                    180 	.globl _WDTCON
                                    181 	.globl _WDTRST
                                    182 	.globl _EECON
                                    183 	.globl _CLKREG
                                    184 	.globl _AUXR
                                    185 	.globl _dati
                                    186 ;--------------------------------------------------------
                                    187 ; special function registers
                                    188 ;--------------------------------------------------------
                                    189 	.area RSEG    (ABS,DATA)
      000000                        190 	.org 0x0000
                           00008E   191 _AUXR	=	0x008e
                           00008F   192 _CLKREG	=	0x008f
                           000096   193 _EECON	=	0x0096
                           0000A6   194 _WDTRST	=	0x00a6
                           0000A7   195 _WDTCON	=	0x00a7
                           0000A9   196 _SADDR	=	0x00a9
                           0000B7   197 _IPH	=	0x00b7
                           0000B9   198 _SADEN	=	0x00b9
                           000080   199 _P0	=	0x0080
                           000081   200 _SP	=	0x0081
                           000082   201 _DPL	=	0x0082
                           000082   202 _DP0L	=	0x0082
                           000083   203 _DPH	=	0x0083
                           000083   204 _DP0H	=	0x0083
                           000084   205 _DP1L	=	0x0084
                           000085   206 _DP1H	=	0x0085
                           000086   207 _SPDR	=	0x0086
                           000087   208 _PCON	=	0x0087
                           000088   209 _TCON	=	0x0088
                           000089   210 _TMOD	=	0x0089
                           00008A   211 _TL0	=	0x008a
                           00008B   212 _TL1	=	0x008b
                           00008C   213 _TH0	=	0x008c
                           00008D   214 _TH1	=	0x008d
                           000090   215 _P1	=	0x0090
                           000096   216 _WMCON	=	0x0096
                           000098   217 _SCON	=	0x0098
                           000099   218 _SBUF	=	0x0099
                           0000A0   219 _P2	=	0x00a0
                           0000A8   220 _IE	=	0x00a8
                           0000AA   221 _SPSR	=	0x00aa
                           0000B0   222 _P3	=	0x00b0
                           0000B8   223 _IP	=	0x00b8
                           0000C8   224 _T2CON	=	0x00c8
                           0000C9   225 _T2MOD	=	0x00c9
                           0000CA   226 _RCAP2L	=	0x00ca
                           0000CB   227 _RCAP2H	=	0x00cb
                           0000CC   228 _TL2	=	0x00cc
                           0000CD   229 _TH2	=	0x00cd
                           0000D0   230 _PSW	=	0x00d0
                           0000D5   231 _SPCR	=	0x00d5
                           0000E0   232 _ACC	=	0x00e0
                           0000E0   233 _A	=	0x00e0
                           0000F0   234 _B	=	0x00f0
                           00008E   235 _ALE	=	0x008e
                                    236 ;--------------------------------------------------------
                                    237 ; special function bits
                                    238 ;--------------------------------------------------------
                                    239 	.area RSEG    (ABS,DATA)
      000000                        240 	.org 0x0000
                           000080   241 _P0_0	=	0x0080
                           000081   242 _P0_1	=	0x0081
                           000082   243 _P0_2	=	0x0082
                           000083   244 _P0_3	=	0x0083
                           000084   245 _P0_4	=	0x0084
                           000085   246 _P0_5	=	0x0085
                           000086   247 _P0_6	=	0x0086
                           000087   248 _P0_7	=	0x0087
                           000088   249 _IT0	=	0x0088
                           000089   250 _IE0	=	0x0089
                           00008A   251 _IT1	=	0x008a
                           00008B   252 _IE1	=	0x008b
                           00008C   253 _TR0	=	0x008c
                           00008D   254 _TF0	=	0x008d
                           00008E   255 _TR1	=	0x008e
                           00008F   256 _TF1	=	0x008f
                           000090   257 _P1_0	=	0x0090
                           000091   258 _P1_1	=	0x0091
                           000092   259 _P1_2	=	0x0092
                           000093   260 _P1_3	=	0x0093
                           000094   261 _P1_4	=	0x0094
                           000095   262 _P1_5	=	0x0095
                           000096   263 _P1_6	=	0x0096
                           000097   264 _P1_7	=	0x0097
                           000090   265 _T2	=	0x0090
                           000091   266 _T2EX	=	0x0091
                           000094   267 _SS	=	0x0094
                           000095   268 _MOSI	=	0x0095
                           000096   269 _MISO	=	0x0096
                           000097   270 _SCK	=	0x0097
                           000098   271 _RI	=	0x0098
                           000099   272 _TI	=	0x0099
                           00009A   273 _RB8	=	0x009a
                           00009B   274 _TB8	=	0x009b
                           00009C   275 _REN	=	0x009c
                           00009D   276 _SM2	=	0x009d
                           00009E   277 _SM1	=	0x009e
                           00009F   278 _SM0	=	0x009f
                           0000A0   279 _P2_0	=	0x00a0
                           0000A1   280 _P2_1	=	0x00a1
                           0000A2   281 _P2_2	=	0x00a2
                           0000A3   282 _P2_3	=	0x00a3
                           0000A4   283 _P2_4	=	0x00a4
                           0000A5   284 _P2_5	=	0x00a5
                           0000A6   285 _P2_6	=	0x00a6
                           0000A7   286 _P2_7	=	0x00a7
                           0000A8   287 _EX0	=	0x00a8
                           0000A9   288 _ET0	=	0x00a9
                           0000AA   289 _EX1	=	0x00aa
                           0000AB   290 _ET1	=	0x00ab
                           0000AC   291 _ES	=	0x00ac
                           0000AD   292 _ET2	=	0x00ad
                           0000AF   293 _EA	=	0x00af
                           0000B0   294 _P3_0	=	0x00b0
                           0000B1   295 _P3_1	=	0x00b1
                           0000B2   296 _P3_2	=	0x00b2
                           0000B3   297 _P3_3	=	0x00b3
                           0000B4   298 _P3_4	=	0x00b4
                           0000B5   299 _P3_5	=	0x00b5
                           0000B6   300 _P3_6	=	0x00b6
                           0000B7   301 _P3_7	=	0x00b7
                           0000B0   302 _RXD	=	0x00b0
                           0000B1   303 _TXD	=	0x00b1
                           0000B2   304 _INT0	=	0x00b2
                           0000B3   305 _INT1	=	0x00b3
                           0000B4   306 _T0	=	0x00b4
                           0000B5   307 _T1	=	0x00b5
                           0000B6   308 _WR	=	0x00b6
                           0000B7   309 _RD	=	0x00b7
                           0000B8   310 _PX0	=	0x00b8
                           0000B9   311 _PT0	=	0x00b9
                           0000BA   312 _PX1	=	0x00ba
                           0000BB   313 _PT1	=	0x00bb
                           0000BC   314 _PS	=	0x00bc
                           0000BD   315 _PT2	=	0x00bd
                           0000C8   316 _T2CON_0	=	0x00c8
                           0000C9   317 _T2CON_1	=	0x00c9
                           0000CA   318 _T2CON_2	=	0x00ca
                           0000CB   319 _T2CON_3	=	0x00cb
                           0000CC   320 _T2CON_4	=	0x00cc
                           0000CD   321 _T2CON_5	=	0x00cd
                           0000CE   322 _T2CON_6	=	0x00ce
                           0000CF   323 _T2CON_7	=	0x00cf
                           0000C8   324 _CP_RL2	=	0x00c8
                           0000C9   325 _C_T2	=	0x00c9
                           0000CA   326 _TR2	=	0x00ca
                           0000CB   327 _EXEN2	=	0x00cb
                           0000CC   328 _TCLK	=	0x00cc
                           0000CD   329 _RCLK	=	0x00cd
                           0000CE   330 _EXF2	=	0x00ce
                           0000CF   331 _TF2	=	0x00cf
                           0000D0   332 _P	=	0x00d0
                           0000D1   333 _FL	=	0x00d1
                           0000D2   334 _OV	=	0x00d2
                           0000D3   335 _RS0	=	0x00d3
                           0000D4   336 _RS1	=	0x00d4
                           0000D5   337 _F0	=	0x00d5
                           0000D6   338 _AC	=	0x00d6
                           0000D7   339 _CY	=	0x00d7
                           0000F0   340 _BREG_F0	=	0x00f0
                           0000F1   341 _BREG_F1	=	0x00f1
                           0000F2   342 _BREG_F2	=	0x00f2
                           0000F3   343 _BREG_F3	=	0x00f3
                           0000F4   344 _BREG_F4	=	0x00f4
                           0000F5   345 _BREG_F5	=	0x00f5
                           0000F6   346 _BREG_F6	=	0x00f6
                           0000F7   347 _BREG_F7	=	0x00f7
                                    348 ;--------------------------------------------------------
                                    349 ; overlayable register banks
                                    350 ;--------------------------------------------------------
                                    351 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        352 	.ds 8
                                    353 ;--------------------------------------------------------
                                    354 ; internal ram data
                                    355 ;--------------------------------------------------------
                                    356 	.area DSEG    (DATA)
                           000000   357 _dati	=	0x0000
      000000                        358 _dumpCODE_indirizzo_131072_56:
      000000                        359 	.ds 2
      000002                        360 _dumpCODE_posto_262144_62:
      000002                        361 	.ds 2
      000004                        362 _dumpCODE_posto_262144_65:
      000004                        363 	.ds 1
      000005                        364 _dumpRAM_indirizzo_131072_70:
      000005                        365 	.ds 2
      000007                        366 _dumpRAM_posto_262144_76:
      000007                        367 	.ds 2
      000009                        368 _dumpRAM_posto_262144_79:
      000009                        369 	.ds 1
      00000A                        370 _hexCODE_puntatore_65536_83:
      00000A                        371 	.ds 3
      00000D                        372 _hexCODE_checksum_65537_84:
      00000D                        373 	.ds 2
      00000F                        374 _p_pin_65537_105:
      00000F                        375 	.ds 1
                                    376 ;--------------------------------------------------------
                                    377 ; overlayable items in internal ram
                                    378 ;--------------------------------------------------------
                                    379 ;--------------------------------------------------------
                                    380 ; Stack segment in internal ram
                                    381 ;--------------------------------------------------------
                                    382 	.area	SSEG
      000000                        383 __start__stack:
      000000                        384 	.ds	1
                                    385 
                                    386 ;--------------------------------------------------------
                                    387 ; indirectly addressable internal ram data
                                    388 ;--------------------------------------------------------
                                    389 	.area ISEG    (DATA)
                                    390 ;--------------------------------------------------------
                                    391 ; absolute internal ram data
                                    392 ;--------------------------------------------------------
                                    393 	.area IABS    (ABS,DATA)
                                    394 	.area IABS    (ABS,DATA)
                                    395 ;--------------------------------------------------------
                                    396 ; bit data
                                    397 ;--------------------------------------------------------
                                    398 	.area BSEG    (BIT)
      000000                        399 _main_sloc0_1_0:
      000000                        400 	.ds 1
                                    401 ;--------------------------------------------------------
                                    402 ; paged external ram data
                                    403 ;--------------------------------------------------------
                                    404 	.area PSEG    (PAG,XDATA)
                                    405 ;--------------------------------------------------------
                                    406 ; external ram data
                                    407 ;--------------------------------------------------------
                                    408 	.area XSEG    (XDATA)
                                    409 ;--------------------------------------------------------
                                    410 ; absolute external ram data
                                    411 ;--------------------------------------------------------
                                    412 	.area XABS    (ABS,XDATA)
                                    413 ;--------------------------------------------------------
                                    414 ; external initialized ram data
                                    415 ;--------------------------------------------------------
                                    416 	.area XISEG   (XDATA)
                                    417 	.area HOME    (CODE)
                                    418 	.area GSINIT0 (CODE)
                                    419 	.area GSINIT1 (CODE)
                                    420 	.area GSINIT2 (CODE)
                                    421 	.area GSINIT3 (CODE)
                                    422 	.area GSINIT4 (CODE)
                                    423 	.area GSINIT5 (CODE)
                                    424 	.area GSINIT  (CODE)
                                    425 	.area GSFINAL (CODE)
                                    426 	.area CSEG    (CODE)
                                    427 ;--------------------------------------------------------
                                    428 ; interrupt vector
                                    429 ;--------------------------------------------------------
                                    430 	.area HOME    (CODE)
      000000                        431 __interrupt_vect:
      000000 02r00r00         [24]  432 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  433 	reti
      000004                        434 	.ds	7
      00000B 02r00r00         [24]  435 	ljmp	_it_timer0
      00000E                        436 	.ds	5
      000013 32               [24]  437 	reti
      000014                        438 	.ds	7
      00001B 32               [24]  439 	reti
      00001C                        440 	.ds	7
      000023 02r00r00         [24]  441 	ljmp	_SerInt
                                    442 ;--------------------------------------------------------
                                    443 ; global & static initialisations
                                    444 ;--------------------------------------------------------
                                    445 	.area HOME    (CODE)
                                    446 	.area GSINIT  (CODE)
                                    447 	.area GSFINAL (CODE)
                                    448 	.area GSINIT  (CODE)
                                    449 	.globl __sdcc_gsinit_startup
                                    450 	.globl __sdcc_program_startup
                                    451 	.globl __start__stack
                                    452 	.globl __mcs51_genXINIT
                                    453 	.globl __mcs51_genXRAMCLEAR
                                    454 	.globl __mcs51_genRAMCLEAR
                                    455 	.area GSFINAL (CODE)
      000000 02r00r26         [24]  456 	ljmp	__sdcc_program_startup
                                    457 ;--------------------------------------------------------
                                    458 ; Home
                                    459 ;--------------------------------------------------------
                                    460 	.area HOME    (CODE)
                                    461 	.area HOME    (CODE)
      000026                        462 __sdcc_program_startup:
      000026 02r0Dr3A         [24]  463 	ljmp	_main
                                    464 ;	return from main will return to caller
                                    465 ;--------------------------------------------------------
                                    466 ; code
                                    467 ;--------------------------------------------------------
                                    468 	.area CSEG    (CODE)
                                    469 ;------------------------------------------------------------
                                    470 ;Allocation info for local variables in function 'felix'
                                    471 ;------------------------------------------------------------
                                    472 ;	8052Explorer.c:126: void felix (void) {
                                    473 ;	-----------------------------------------
                                    474 ;	 function felix
                                    475 ;	-----------------------------------------
      000000                        476 _felix:
                           000007   477 	ar7 = 0x07
                           000006   478 	ar6 = 0x06
                           000005   479 	ar5 = 0x05
                           000004   480 	ar4 = 0x04
                           000003   481 	ar3 = 0x03
                           000002   482 	ar2 = 0x02
                           000001   483 	ar1 = 0x01
                           000000   484 	ar0 = 0x00
                                    485 ;	8052Explorer.c:127: putchar('\r');
      000000 90 00 0D         [24]  486 	mov	dptr,#0x000d
      000003 12r00r00         [24]  487 	lcall	_putchar
                                    488 ;	8052Explorer.c:160: puts("                         '~~~*==Y*f~~~ ");
      000006 90r00r27         [24]  489 	mov	dptr,#___str_64
      000009 75 F0 80         [24]  490 	mov	b,#0x80
      00000C 12r00r00         [24]  491 	lcall	_puts
                                    492 ;	8052Explorer.c:161: putchar('\r');
      00000F 90 00 0D         [24]  493 	mov	dptr,#0x000d
                                    494 ;	8052Explorer.c:162: }
      000012 02r00r00         [24]  495 	ljmp	_putchar
                                    496 ;------------------------------------------------------------
                                    497 ;Allocation info for local variables in function 'dumpEEPROM'
                                    498 ;------------------------------------------------------------
                                    499 ;eepromchar                Allocated to registers r7 
                                    500 ;indirizzo                 Allocated to registers r6 r7 
                                    501 ;posto                     Allocated to registers r5 
                                    502 ;lettura                   Allocated to registers r4 
                                    503 ;lettura                   Allocated to registers r4 
                                    504 ;posto                     Allocated to registers r5 
                                    505 ;------------------------------------------------------------
                                    506 ;	8052Explorer.c:165: void dumpEEPROM () {
                                    507 ;	-----------------------------------------
                                    508 ;	 function dumpEEPROM
                                    509 ;	-----------------------------------------
      000015                        510 _dumpEEPROM:
                                    511 ;	8052Explorer.c:166: puts("Dumping eeprom content and changing first character:");
      000015 90r07r78         [24]  512 	mov	dptr,#___str_65
      000018 75 F0 80         [24]  513 	mov	b,#0x80
      00001B 12r00r00         [24]  514 	lcall	_puts
                                    515 ;	8052Explorer.c:168: unsigned char eepromchar = readEeprom(0);
      00001E 90 00 00         [24]  516 	mov	dptr,#0x0000
      000021 12r00r00         [24]  517 	lcall	_readEeprom
      000024 E5 82            [12]  518 	mov	a,dpl
                                    519 ;	8052Explorer.c:169: eepromchar++;
      000026 04               [12]  520 	inc	a
      000027 FF               [12]  521 	mov	r7,a
                                    522 ;	8052Explorer.c:170: if (0x5B == eepromchar) {
      000028 BF 5B 02         [24]  523 	cjne	r7,#0x5b,00102$
                                    524 ;	8052Explorer.c:171: eepromchar = 0x41;
      00002B 7F 41            [12]  525 	mov	r7,#0x41
      00002D                        526 00102$:
                                    527 ;	8052Explorer.c:173: writeEeprom (eepromchar, 0);
      00002D E4               [12]  528 	clr	a
      00002E F5*00            [12]  529 	mov	_writeEeprom_PARM_2,a
      000030 F5*01            [12]  530 	mov	(_writeEeprom_PARM_2 + 1),a
      000032 8F 82            [24]  531 	mov	dpl,r7
      000034 12r00r00         [24]  532 	lcall	_writeEeprom
                                    533 ;	8052Explorer.c:175: for (unsigned short indirizzo = 0; indirizzo <= EEPROMSIZE; indirizzo +=16){
      000037 7E 00            [12]  534 	mov	r6,#0x00
      000039 7F 00            [12]  535 	mov	r7,#0x00
      00003B                        536 00127$:
      00003B 8E 04            [24]  537 	mov	ar4,r6
      00003D 8F 05            [24]  538 	mov	ar5,r7
      00003F C3               [12]  539 	clr	c
      000040 74 FF            [12]  540 	mov	a,#0xff
      000042 9C               [12]  541 	subb	a,r4
      000043 74 07            [12]  542 	mov	a,#0x07
      000045 9D               [12]  543 	subb	a,r5
      000046 50 03            [24]  544 	jnc	00195$
      000048 02r01rD6         [24]  545 	ljmp	00119$
      00004B                        546 00195$:
                                    547 ;	8052Explorer.c:176: if (indirizzo < 0x10) {
      00004B C3               [12]  548 	clr	c
      00004C EC               [12]  549 	mov	a,r4
      00004D 94 10            [12]  550 	subb	a,#0x10
      00004F ED               [12]  551 	mov	a,r5
      000050 94 00            [12]  552 	subb	a,#0x00
      000052 50 1F            [24]  553 	jnc	00110$
                                    554 ;	8052Explorer.c:177: printf_tiny("000%x  ", indirizzo);
      000054 C0 07            [24]  555 	push	ar7
      000056 C0 06            [24]  556 	push	ar6
      000058 C0 06            [24]  557 	push	ar6
      00005A C0 07            [24]  558 	push	ar7
      00005C 74rAD            [12]  559 	mov	a,#___str_66
      00005E C0 E0            [24]  560 	push	acc
      000060 74s07            [12]  561 	mov	a,#(___str_66 >> 8)
      000062 C0 E0            [24]  562 	push	acc
      000064 12r00r00         [24]  563 	lcall	_printf_tiny
      000067 E5 81            [12]  564 	mov	a,sp
      000069 24 FC            [12]  565 	add	a,#0xfc
      00006B F5 81            [12]  566 	mov	sp,a
      00006D D0 06            [24]  567 	pop	ar6
      00006F D0 07            [24]  568 	pop	ar7
      000071 80 65            [24]  569 	sjmp	00138$
      000073                        570 00110$:
                                    571 ;	8052Explorer.c:178: } else if (indirizzo < 0x100) {
      000073 74 FF            [12]  572 	mov	a,#0x100 - 0x01
      000075 2D               [12]  573 	add	a,r5
      000076 40 1F            [24]  574 	jc	00107$
                                    575 ;	8052Explorer.c:179: printf_tiny("00%x  ", indirizzo);
      000078 C0 07            [24]  576 	push	ar7
      00007A C0 06            [24]  577 	push	ar6
      00007C C0 06            [24]  578 	push	ar6
      00007E C0 07            [24]  579 	push	ar7
      000080 74rB5            [12]  580 	mov	a,#___str_67
      000082 C0 E0            [24]  581 	push	acc
      000084 74s07            [12]  582 	mov	a,#(___str_67 >> 8)
      000086 C0 E0            [24]  583 	push	acc
      000088 12r00r00         [24]  584 	lcall	_printf_tiny
      00008B E5 81            [12]  585 	mov	a,sp
      00008D 24 FC            [12]  586 	add	a,#0xfc
      00008F F5 81            [12]  587 	mov	sp,a
      000091 D0 06            [24]  588 	pop	ar6
      000093 D0 07            [24]  589 	pop	ar7
      000095 80 41            [24]  590 	sjmp	00138$
      000097                        591 00107$:
                                    592 ;	8052Explorer.c:180: } else if (indirizzo < 0x1000) {
      000097 74 F0            [12]  593 	mov	a,#0x100 - 0x10
      000099 2D               [12]  594 	add	a,r5
      00009A 40 1F            [24]  595 	jc	00104$
                                    596 ;	8052Explorer.c:181: printf_tiny("0%x  ", indirizzo);
      00009C C0 07            [24]  597 	push	ar7
      00009E C0 06            [24]  598 	push	ar6
      0000A0 C0 06            [24]  599 	push	ar6
      0000A2 C0 07            [24]  600 	push	ar7
      0000A4 74rBC            [12]  601 	mov	a,#___str_68
      0000A6 C0 E0            [24]  602 	push	acc
      0000A8 74s07            [12]  603 	mov	a,#(___str_68 >> 8)
      0000AA C0 E0            [24]  604 	push	acc
      0000AC 12r00r00         [24]  605 	lcall	_printf_tiny
      0000AF E5 81            [12]  606 	mov	a,sp
      0000B1 24 FC            [12]  607 	add	a,#0xfc
      0000B3 F5 81            [12]  608 	mov	sp,a
      0000B5 D0 06            [24]  609 	pop	ar6
      0000B7 D0 07            [24]  610 	pop	ar7
      0000B9 80 1D            [24]  611 	sjmp	00138$
      0000BB                        612 00104$:
                                    613 ;	8052Explorer.c:183: printf_tiny("%x  ", indirizzo);
      0000BB C0 07            [24]  614 	push	ar7
      0000BD C0 06            [24]  615 	push	ar6
      0000BF C0 06            [24]  616 	push	ar6
      0000C1 C0 07            [24]  617 	push	ar7
      0000C3 74rC2            [12]  618 	mov	a,#___str_69
      0000C5 C0 E0            [24]  619 	push	acc
      0000C7 74s07            [12]  620 	mov	a,#(___str_69 >> 8)
      0000C9 C0 E0            [24]  621 	push	acc
      0000CB 12r00r00         [24]  622 	lcall	_printf_tiny
      0000CE E5 81            [12]  623 	mov	a,sp
      0000D0 24 FC            [12]  624 	add	a,#0xfc
      0000D2 F5 81            [12]  625 	mov	sp,a
      0000D4 D0 06            [24]  626 	pop	ar6
      0000D6 D0 07            [24]  627 	pop	ar7
                                    628 ;	8052Explorer.c:185: for (unsigned char posto = 0; posto < 16; posto++) {
      0000D8                        629 00138$:
      0000D8 7D 00            [12]  630 	mov	r5,#0x00
      0000DA                        631 00121$:
      0000DA BD 10 00         [24]  632 	cjne	r5,#0x10,00199$
      0000DD                        633 00199$:
      0000DD 50 64            [24]  634 	jnc	00114$
                                    635 ;	8052Explorer.c:186: unsigned char lettura = readEeprom(indirizzo + (unsigned int)posto);
      0000DF 8D 03            [24]  636 	mov	ar3,r5
      0000E1 7C 00            [12]  637 	mov	r4,#0x00
      0000E3 8E 01            [24]  638 	mov	ar1,r6
      0000E5 8F 02            [24]  639 	mov	ar2,r7
      0000E7 EB               [12]  640 	mov	a,r3
      0000E8 29               [12]  641 	add	a,r1
      0000E9 FB               [12]  642 	mov	r3,a
      0000EA EC               [12]  643 	mov	a,r4
      0000EB 3A               [12]  644 	addc	a,r2
      0000EC FC               [12]  645 	mov	r4,a
      0000ED 8B 82            [24]  646 	mov	dpl,r3
      0000EF 8C 83            [24]  647 	mov	dph,r4
      0000F1 C0 07            [24]  648 	push	ar7
      0000F3 C0 06            [24]  649 	push	ar6
      0000F5 C0 05            [24]  650 	push	ar5
      0000F7 12r00r00         [24]  651 	lcall	_readEeprom
      0000FA AC 82            [24]  652 	mov	r4,dpl
      0000FC D0 05            [24]  653 	pop	ar5
      0000FE D0 06            [24]  654 	pop	ar6
      000100 D0 07            [24]  655 	pop	ar7
                                    656 ;	8052Explorer.c:187: if ( lettura < 0x10 ) {
      000102 BC 10 00         [24]  657 	cjne	r4,#0x10,00201$
      000105                        658 00201$:
      000105 50 16            [24]  659 	jnc	00113$
                                    660 ;	8052Explorer.c:188: putchar('0');
      000107 90 00 30         [24]  661 	mov	dptr,#0x0030
      00010A C0 07            [24]  662 	push	ar7
      00010C C0 06            [24]  663 	push	ar6
      00010E C0 05            [24]  664 	push	ar5
      000110 C0 04            [24]  665 	push	ar4
      000112 12r00r00         [24]  666 	lcall	_putchar
      000115 D0 04            [24]  667 	pop	ar4
      000117 D0 05            [24]  668 	pop	ar5
      000119 D0 06            [24]  669 	pop	ar6
      00011B D0 07            [24]  670 	pop	ar7
      00011D                        671 00113$:
                                    672 ;	8052Explorer.c:190: printf_tiny("%x ", lettura);
      00011D 7B 00            [12]  673 	mov	r3,#0x00
      00011F C0 07            [24]  674 	push	ar7
      000121 C0 06            [24]  675 	push	ar6
      000123 C0 05            [24]  676 	push	ar5
      000125 C0 04            [24]  677 	push	ar4
      000127 C0 03            [24]  678 	push	ar3
      000129 74rC7            [12]  679 	mov	a,#___str_70
      00012B C0 E0            [24]  680 	push	acc
      00012D 74s07            [12]  681 	mov	a,#(___str_70 >> 8)
      00012F C0 E0            [24]  682 	push	acc
      000131 12r00r00         [24]  683 	lcall	_printf_tiny
      000134 E5 81            [12]  684 	mov	a,sp
      000136 24 FC            [12]  685 	add	a,#0xfc
      000138 F5 81            [12]  686 	mov	sp,a
      00013A D0 05            [24]  687 	pop	ar5
      00013C D0 06            [24]  688 	pop	ar6
      00013E D0 07            [24]  689 	pop	ar7
                                    690 ;	8052Explorer.c:185: for (unsigned char posto = 0; posto < 16; posto++) {
      000140 0D               [12]  691 	inc	r5
      000141 80 97            [24]  692 	sjmp	00121$
      000143                        693 00114$:
                                    694 ;	8052Explorer.c:193: printf_tiny(" |");
      000143 C0 07            [24]  695 	push	ar7
      000145 C0 06            [24]  696 	push	ar6
      000147 74rCB            [12]  697 	mov	a,#___str_71
      000149 C0 E0            [24]  698 	push	acc
      00014B 74s07            [12]  699 	mov	a,#(___str_71 >> 8)
      00014D C0 E0            [24]  700 	push	acc
      00014F 12r00r00         [24]  701 	lcall	_printf_tiny
      000152 15 81            [12]  702 	dec	sp
      000154 15 81            [12]  703 	dec	sp
      000156 D0 06            [24]  704 	pop	ar6
      000158 D0 07            [24]  705 	pop	ar7
                                    706 ;	8052Explorer.c:195: for (unsigned char posto=0; posto < 16; posto++) {
      00015A 7D 00            [12]  707 	mov	r5,#0x00
      00015C                        708 00124$:
      00015C BD 10 00         [24]  709 	cjne	r5,#0x10,00203$
      00015F                        710 00203$:
      00015F 50 4F            [24]  711 	jnc	00118$
                                    712 ;	8052Explorer.c:196: lettura = readEeprom(indirizzo+(short)posto);
      000161 8D 03            [24]  713 	mov	ar3,r5
      000163 7C 00            [12]  714 	mov	r4,#0x00
      000165 EB               [12]  715 	mov	a,r3
      000166 2E               [12]  716 	add	a,r6
      000167 F5 82            [12]  717 	mov	dpl,a
      000169 EC               [12]  718 	mov	a,r4
      00016A 3F               [12]  719 	addc	a,r7
      00016B F5 83            [12]  720 	mov	dph,a
      00016D C0 07            [24]  721 	push	ar7
      00016F C0 06            [24]  722 	push	ar6
      000171 C0 05            [24]  723 	push	ar5
      000173 12r00r00         [24]  724 	lcall	_readEeprom
      000176 AC 82            [24]  725 	mov	r4,dpl
      000178 D0 05            [24]  726 	pop	ar5
      00017A D0 06            [24]  727 	pop	ar6
      00017C D0 07            [24]  728 	pop	ar7
                                    729 ;	8052Explorer.c:197: if ( lettura < 0x20 || lettura > 0x7E ) {
      00017E BC 20 00         [24]  730 	cjne	r4,#0x20,00205$
      000181                        731 00205$:
      000181 40 05            [24]  732 	jc	00115$
      000183 EC               [12]  733 	mov	a,r4
      000184 24 81            [12]  734 	add	a,#0xff - 0x7e
      000186 50 02            [24]  735 	jnc	00116$
      000188                        736 00115$:
                                    737 ;	8052Explorer.c:198: lettura = '.';
      000188 7C 2E            [12]  738 	mov	r4,#0x2e
      00018A                        739 00116$:
                                    740 ;	8052Explorer.c:200: printf_tiny("%c", lettura);
      00018A 7B 00            [12]  741 	mov	r3,#0x00
      00018C C0 07            [24]  742 	push	ar7
      00018E C0 06            [24]  743 	push	ar6
      000190 C0 05            [24]  744 	push	ar5
      000192 C0 04            [24]  745 	push	ar4
      000194 C0 03            [24]  746 	push	ar3
      000196 74rCE            [12]  747 	mov	a,#___str_72
      000198 C0 E0            [24]  748 	push	acc
      00019A 74s07            [12]  749 	mov	a,#(___str_72 >> 8)
      00019C C0 E0            [24]  750 	push	acc
      00019E 12r00r00         [24]  751 	lcall	_printf_tiny
      0001A1 E5 81            [12]  752 	mov	a,sp
      0001A3 24 FC            [12]  753 	add	a,#0xfc
      0001A5 F5 81            [12]  754 	mov	sp,a
      0001A7 D0 05            [24]  755 	pop	ar5
      0001A9 D0 06            [24]  756 	pop	ar6
      0001AB D0 07            [24]  757 	pop	ar7
                                    758 ;	8052Explorer.c:195: for (unsigned char posto=0; posto < 16; posto++) {
      0001AD 0D               [12]  759 	inc	r5
      0001AE 80 AC            [24]  760 	sjmp	00124$
      0001B0                        761 00118$:
                                    762 ;	8052Explorer.c:203: putchar('|');
      0001B0 90 00 7C         [24]  763 	mov	dptr,#0x007c
      0001B3 C0 07            [24]  764 	push	ar7
      0001B5 C0 06            [24]  765 	push	ar6
      0001B7 12r00r00         [24]  766 	lcall	_putchar
                                    767 ;	8052Explorer.c:204: putchar('\r');
      0001BA 90 00 0D         [24]  768 	mov	dptr,#0x000d
      0001BD 12r00r00         [24]  769 	lcall	_putchar
      0001C0 D0 06            [24]  770 	pop	ar6
      0001C2 D0 07            [24]  771 	pop	ar7
                                    772 ;	8052Explorer.c:175: for (unsigned short indirizzo = 0; indirizzo <= EEPROMSIZE; indirizzo +=16){
      0001C4 8E 04            [24]  773 	mov	ar4,r6
      0001C6 8F 05            [24]  774 	mov	ar5,r7
      0001C8 74 10            [12]  775 	mov	a,#0x10
      0001CA 2C               [12]  776 	add	a,r4
      0001CB FC               [12]  777 	mov	r4,a
      0001CC E4               [12]  778 	clr	a
      0001CD 3D               [12]  779 	addc	a,r5
      0001CE FD               [12]  780 	mov	r5,a
      0001CF 8C 06            [24]  781 	mov	ar6,r4
      0001D1 8D 07            [24]  782 	mov	ar7,r5
      0001D3 02r00r3B         [24]  783 	ljmp	00127$
      0001D6                        784 00119$:
                                    785 ;	8052Explorer.c:207: putchar('\r');
      0001D6 90 00 0D         [24]  786 	mov	dptr,#0x000d
      0001D9 12r00r00         [24]  787 	lcall	_putchar
                                    788 ;	8052Explorer.c:208: putchar('\r');
      0001DC 90 00 0D         [24]  789 	mov	dptr,#0x000d
                                    790 ;	8052Explorer.c:210: }
      0001DF 02r00r00         [24]  791 	ljmp	_putchar
                                    792 ;------------------------------------------------------------
                                    793 ;Allocation info for local variables in function 'hexEEPROM'
                                    794 ;------------------------------------------------------------
                                    795 ;checksum                  Allocated to registers r5 r4 
                                    796 ;indirizzo                 Allocated to registers r6 r7 
                                    797 ;posto                     Allocated to registers r3 
                                    798 ;lettura                   Allocated to registers r2 
                                    799 ;------------------------------------------------------------
                                    800 ;	8052Explorer.c:212: void hexEEPROM () {
                                    801 ;	-----------------------------------------
                                    802 ;	 function hexEEPROM
                                    803 ;	-----------------------------------------
      0001E2                        804 _hexEEPROM:
                                    805 ;	8052Explorer.c:214: puts("Dumping eeprom content in hex format:");
      0001E2 90r07rD1         [24]  806 	mov	dptr,#___str_73
      0001E5 75 F0 80         [24]  807 	mov	b,#0x80
      0001E8 12r00r00         [24]  808 	lcall	_puts
                                    809 ;	8052Explorer.c:215: for (unsigned short indirizzo = 0; indirizzo <= EEPROMSIZE; indirizzo += 16){
      0001EB 7E 00            [12]  810 	mov	r6,#0x00
      0001ED 7F 00            [12]  811 	mov	r7,#0x00
      0001EF                        812 00120$:
      0001EF 8E 04            [24]  813 	mov	ar4,r6
      0001F1 8F 05            [24]  814 	mov	ar5,r7
      0001F3 C3               [12]  815 	clr	c
      0001F4 74 FF            [12]  816 	mov	a,#0xff
      0001F6 9C               [12]  817 	subb	a,r4
      0001F7 74 07            [12]  818 	mov	a,#0x07
      0001F9 9D               [12]  819 	subb	a,r5
      0001FA 50 03            [24]  820 	jnc	00170$
      0001FC 02r03rF4         [24]  821 	ljmp	00115$
      0001FF                        822 00170$:
                                    823 ;	8052Explorer.c:216: printf_tiny(":10");
      0001FF C0 07            [24]  824 	push	ar7
      000201 C0 06            [24]  825 	push	ar6
      000203 C0 05            [24]  826 	push	ar5
      000205 C0 04            [24]  827 	push	ar4
      000207 74rF7            [12]  828 	mov	a,#___str_74
      000209 C0 E0            [24]  829 	push	acc
      00020B 74s07            [12]  830 	mov	a,#(___str_74 >> 8)
      00020D C0 E0            [24]  831 	push	acc
      00020F 12r00r00         [24]  832 	lcall	_printf_tiny
      000212 15 81            [12]  833 	dec	sp
      000214 15 81            [12]  834 	dec	sp
      000216 D0 04            [24]  835 	pop	ar4
      000218 D0 05            [24]  836 	pop	ar5
      00021A D0 06            [24]  837 	pop	ar6
      00021C D0 07            [24]  838 	pop	ar7
                                    839 ;	8052Explorer.c:217: checksum = 0x10;
      00021E 7A 10            [12]  840 	mov	r2,#0x10
      000220 7B 00            [12]  841 	mov	r3,#0x00
                                    842 ;	8052Explorer.c:218: if (indirizzo < 0x10) {
      000222 C3               [12]  843 	clr	c
      000223 EC               [12]  844 	mov	a,r4
      000224 94 10            [12]  845 	subb	a,#0x10
      000226 ED               [12]  846 	mov	a,r5
      000227 94 00            [12]  847 	subb	a,#0x00
      000229 50 28            [24]  848 	jnc	00108$
                                    849 ;	8052Explorer.c:219: printf_tiny("000%x", indirizzo);
      00022B C0 07            [24]  850 	push	ar7
      00022D C0 06            [24]  851 	push	ar6
      00022F C0 03            [24]  852 	push	ar3
      000231 C0 02            [24]  853 	push	ar2
      000233 C0 06            [24]  854 	push	ar6
      000235 C0 07            [24]  855 	push	ar7
      000237 74rFB            [12]  856 	mov	a,#___str_75
      000239 C0 E0            [24]  857 	push	acc
      00023B 74s07            [12]  858 	mov	a,#(___str_75 >> 8)
      00023D C0 E0            [24]  859 	push	acc
      00023F 12r00r00         [24]  860 	lcall	_printf_tiny
      000242 E5 81            [12]  861 	mov	a,sp
      000244 24 FC            [12]  862 	add	a,#0xfc
      000246 F5 81            [12]  863 	mov	sp,a
      000248 D0 02            [24]  864 	pop	ar2
      00024A D0 03            [24]  865 	pop	ar3
      00024C D0 06            [24]  866 	pop	ar6
      00024E D0 07            [24]  867 	pop	ar7
      000250 02r02rD0         [24]  868 	ljmp	00109$
      000253                        869 00108$:
                                    870 ;	8052Explorer.c:220: } else if (indirizzo < 0x100) {
      000253 74 FF            [12]  871 	mov	a,#0x100 - 0x01
      000255 2D               [12]  872 	add	a,r5
      000256 40 27            [24]  873 	jc	00105$
                                    874 ;	8052Explorer.c:221: printf_tiny("00%x", indirizzo);
      000258 C0 07            [24]  875 	push	ar7
      00025A C0 06            [24]  876 	push	ar6
      00025C C0 03            [24]  877 	push	ar3
      00025E C0 02            [24]  878 	push	ar2
      000260 C0 06            [24]  879 	push	ar6
      000262 C0 07            [24]  880 	push	ar7
      000264 74r01            [12]  881 	mov	a,#___str_76
      000266 C0 E0            [24]  882 	push	acc
      000268 74s08            [12]  883 	mov	a,#(___str_76 >> 8)
      00026A C0 E0            [24]  884 	push	acc
      00026C 12r00r00         [24]  885 	lcall	_printf_tiny
      00026F E5 81            [12]  886 	mov	a,sp
      000271 24 FC            [12]  887 	add	a,#0xfc
      000273 F5 81            [12]  888 	mov	sp,a
      000275 D0 02            [24]  889 	pop	ar2
      000277 D0 03            [24]  890 	pop	ar3
      000279 D0 06            [24]  891 	pop	ar6
      00027B D0 07            [24]  892 	pop	ar7
      00027D 80 51            [24]  893 	sjmp	00109$
      00027F                        894 00105$:
                                    895 ;	8052Explorer.c:222: } else if (indirizzo < 0x1000) {
      00027F 74 F0            [12]  896 	mov	a,#0x100 - 0x10
      000281 2D               [12]  897 	add	a,r5
      000282 40 27            [24]  898 	jc	00102$
                                    899 ;	8052Explorer.c:223: printf_tiny("0%x", indirizzo);
      000284 C0 07            [24]  900 	push	ar7
      000286 C0 06            [24]  901 	push	ar6
      000288 C0 03            [24]  902 	push	ar3
      00028A C0 02            [24]  903 	push	ar2
      00028C C0 06            [24]  904 	push	ar6
      00028E C0 07            [24]  905 	push	ar7
      000290 74r06            [12]  906 	mov	a,#___str_77
      000292 C0 E0            [24]  907 	push	acc
      000294 74s08            [12]  908 	mov	a,#(___str_77 >> 8)
      000296 C0 E0            [24]  909 	push	acc
      000298 12r00r00         [24]  910 	lcall	_printf_tiny
      00029B E5 81            [12]  911 	mov	a,sp
      00029D 24 FC            [12]  912 	add	a,#0xfc
      00029F F5 81            [12]  913 	mov	sp,a
      0002A1 D0 02            [24]  914 	pop	ar2
      0002A3 D0 03            [24]  915 	pop	ar3
      0002A5 D0 06            [24]  916 	pop	ar6
      0002A7 D0 07            [24]  917 	pop	ar7
      0002A9 80 25            [24]  918 	sjmp	00109$
      0002AB                        919 00102$:
                                    920 ;	8052Explorer.c:225: printf_tiny("%x", indirizzo);
      0002AB C0 07            [24]  921 	push	ar7
      0002AD C0 06            [24]  922 	push	ar6
      0002AF C0 03            [24]  923 	push	ar3
      0002B1 C0 02            [24]  924 	push	ar2
      0002B3 C0 06            [24]  925 	push	ar6
      0002B5 C0 07            [24]  926 	push	ar7
      0002B7 74r0A            [12]  927 	mov	a,#___str_78
      0002B9 C0 E0            [24]  928 	push	acc
      0002BB 74s08            [12]  929 	mov	a,#(___str_78 >> 8)
      0002BD C0 E0            [24]  930 	push	acc
      0002BF 12r00r00         [24]  931 	lcall	_printf_tiny
      0002C2 E5 81            [12]  932 	mov	a,sp
      0002C4 24 FC            [12]  933 	add	a,#0xfc
      0002C6 F5 81            [12]  934 	mov	sp,a
      0002C8 D0 02            [24]  935 	pop	ar2
      0002CA D0 03            [24]  936 	pop	ar3
      0002CC D0 06            [24]  937 	pop	ar6
      0002CE D0 07            [24]  938 	pop	ar7
      0002D0                        939 00109$:
                                    940 ;	8052Explorer.c:227: checksum += (indirizzo >> 8 ) & 0xFF ;
      0002D0 8F 05            [24]  941 	mov	ar5,r7
      0002D2 7C 00            [12]  942 	mov	r4,#0x00
      0002D4 ED               [12]  943 	mov	a,r5
      0002D5 2A               [12]  944 	add	a,r2
      0002D6 FD               [12]  945 	mov	r5,a
      0002D7 EC               [12]  946 	mov	a,r4
      0002D8 3B               [12]  947 	addc	a,r3
      0002D9 FC               [12]  948 	mov	r4,a
                                    949 ;	8052Explorer.c:228: checksum += (indirizzo & 0xFF);
      0002DA 8E 02            [24]  950 	mov	ar2,r6
      0002DC 7B 00            [12]  951 	mov	r3,#0x00
      0002DE EA               [12]  952 	mov	a,r2
      0002DF 2D               [12]  953 	add	a,r5
      0002E0 FD               [12]  954 	mov	r5,a
      0002E1 EB               [12]  955 	mov	a,r3
      0002E2 3C               [12]  956 	addc	a,r4
      0002E3 FC               [12]  957 	mov	r4,a
                                    958 ;	8052Explorer.c:229: printf_tiny("00");
      0002E4 C0 07            [24]  959 	push	ar7
      0002E6 C0 06            [24]  960 	push	ar6
      0002E8 C0 05            [24]  961 	push	ar5
      0002EA C0 04            [24]  962 	push	ar4
      0002EC 74r0D            [12]  963 	mov	a,#___str_79
      0002EE C0 E0            [24]  964 	push	acc
      0002F0 74s08            [12]  965 	mov	a,#(___str_79 >> 8)
      0002F2 C0 E0            [24]  966 	push	acc
      0002F4 12r00r00         [24]  967 	lcall	_printf_tiny
      0002F7 15 81            [12]  968 	dec	sp
      0002F9 15 81            [12]  969 	dec	sp
      0002FB D0 04            [24]  970 	pop	ar4
      0002FD D0 05            [24]  971 	pop	ar5
      0002FF D0 06            [24]  972 	pop	ar6
      000301 D0 07            [24]  973 	pop	ar7
                                    974 ;	8052Explorer.c:232: for (unsigned char posto = 0; posto < 16; posto++) {
      000303 7B 00            [12]  975 	mov	r3,#0x00
      000305                        976 00117$:
      000305 BB 10 00         [24]  977 	cjne	r3,#0x10,00174$
      000308                        978 00174$:
      000308 40 03            [24]  979 	jc	00175$
      00030A 02r03r94         [24]  980 	ljmp	00112$
      00030D                        981 00175$:
                                    982 ;	8052Explorer.c:233: unsigned char lettura = readEeprom(indirizzo+(unsigned short)posto);
      00030D 8B 01            [24]  983 	mov	ar1,r3
      00030F 7A 00            [12]  984 	mov	r2,#0x00
      000311 E9               [12]  985 	mov	a,r1
      000312 2E               [12]  986 	add	a,r6
      000313 F5 82            [12]  987 	mov	dpl,a
      000315 EA               [12]  988 	mov	a,r2
      000316 3F               [12]  989 	addc	a,r7
      000317 F5 83            [12]  990 	mov	dph,a
      000319 C0 07            [24]  991 	push	ar7
      00031B C0 06            [24]  992 	push	ar6
      00031D C0 05            [24]  993 	push	ar5
      00031F C0 04            [24]  994 	push	ar4
      000321 C0 03            [24]  995 	push	ar3
      000323 12r00r00         [24]  996 	lcall	_readEeprom
      000326 AA 82            [24]  997 	mov	r2,dpl
      000328 D0 03            [24]  998 	pop	ar3
      00032A D0 04            [24]  999 	pop	ar4
      00032C D0 05            [24] 1000 	pop	ar5
      00032E D0 06            [24] 1001 	pop	ar6
      000330 D0 07            [24] 1002 	pop	ar7
                                   1003 ;	8052Explorer.c:234: if ( lettura < 0x10 ) {
      000332 BA 10 00         [24] 1004 	cjne	r2,#0x10,00176$
      000335                       1005 00176$:
      000335 50 1E            [24] 1006 	jnc	00111$
                                   1007 ;	8052Explorer.c:235: putchar('0');
      000337 90 00 30         [24] 1008 	mov	dptr,#0x0030
      00033A C0 07            [24] 1009 	push	ar7
      00033C C0 06            [24] 1010 	push	ar6
      00033E C0 05            [24] 1011 	push	ar5
      000340 C0 04            [24] 1012 	push	ar4
      000342 C0 03            [24] 1013 	push	ar3
      000344 C0 02            [24] 1014 	push	ar2
      000346 12r00r00         [24] 1015 	lcall	_putchar
      000349 D0 02            [24] 1016 	pop	ar2
      00034B D0 03            [24] 1017 	pop	ar3
      00034D D0 04            [24] 1018 	pop	ar4
      00034F D0 05            [24] 1019 	pop	ar5
      000351 D0 06            [24] 1020 	pop	ar6
      000353 D0 07            [24] 1021 	pop	ar7
      000355                       1022 00111$:
                                   1023 ;	8052Explorer.c:237: printf_tiny("%x", lettura);
      000355 8A 01            [24] 1024 	mov	ar1,r2
      000357 7A 00            [12] 1025 	mov	r2,#0x00
      000359 C0 07            [24] 1026 	push	ar7
      00035B C0 06            [24] 1027 	push	ar6
      00035D C0 05            [24] 1028 	push	ar5
      00035F C0 04            [24] 1029 	push	ar4
      000361 C0 03            [24] 1030 	push	ar3
      000363 C0 02            [24] 1031 	push	ar2
      000365 C0 01            [24] 1032 	push	ar1
      000367 C0 01            [24] 1033 	push	ar1
      000369 C0 02            [24] 1034 	push	ar2
      00036B 74r0A            [12] 1035 	mov	a,#___str_78
      00036D C0 E0            [24] 1036 	push	acc
      00036F 74s08            [12] 1037 	mov	a,#(___str_78 >> 8)
      000371 C0 E0            [24] 1038 	push	acc
      000373 12r00r00         [24] 1039 	lcall	_printf_tiny
      000376 E5 81            [12] 1040 	mov	a,sp
      000378 24 FC            [12] 1041 	add	a,#0xfc
      00037A F5 81            [12] 1042 	mov	sp,a
      00037C D0 01            [24] 1043 	pop	ar1
      00037E D0 02            [24] 1044 	pop	ar2
      000380 D0 03            [24] 1045 	pop	ar3
      000382 D0 04            [24] 1046 	pop	ar4
      000384 D0 05            [24] 1047 	pop	ar5
      000386 D0 06            [24] 1048 	pop	ar6
      000388 D0 07            [24] 1049 	pop	ar7
                                   1050 ;	8052Explorer.c:238: checksum += lettura;
      00038A E9               [12] 1051 	mov	a,r1
      00038B 2D               [12] 1052 	add	a,r5
      00038C FD               [12] 1053 	mov	r5,a
      00038D EA               [12] 1054 	mov	a,r2
      00038E 3C               [12] 1055 	addc	a,r4
      00038F FC               [12] 1056 	mov	r4,a
                                   1057 ;	8052Explorer.c:232: for (unsigned char posto = 0; posto < 16; posto++) {
      000390 0B               [12] 1058 	inc	r3
      000391 02r03r05         [24] 1059 	ljmp	00117$
      000394                       1060 00112$:
                                   1061 ;	8052Explorer.c:241: checksum = ((~checksum) & 0xFF);
      000394 ED               [12] 1062 	mov	a,r5
      000395 F4               [12] 1063 	cpl	a
      000396 FD               [12] 1064 	mov	r5,a
      000397 EC               [12] 1065 	mov	a,r4
      000398 F4               [12] 1066 	cpl	a
      000399 7C 00            [12] 1067 	mov	r4,#0x00
                                   1068 ;	8052Explorer.c:242: checksum++;
      00039B 0D               [12] 1069 	inc	r5
      00039C BD 00 01         [24] 1070 	cjne	r5,#0x00,00178$
      00039F 0C               [12] 1071 	inc	r4
      0003A0                       1072 00178$:
                                   1073 ;	8052Explorer.c:243: if ( (checksum & 0xFF) < 16 ) {
      0003A0 8D 02            [24] 1074 	mov	ar2,r5
      0003A2 7B 00            [12] 1075 	mov	r3,#0x00
      0003A4 C3               [12] 1076 	clr	c
      0003A5 EA               [12] 1077 	mov	a,r2
      0003A6 94 10            [12] 1078 	subb	a,#0x10
      0003A8 EB               [12] 1079 	mov	a,r3
      0003A9 94 00            [12] 1080 	subb	a,#0x00
      0003AB 50 16            [24] 1081 	jnc	00114$
                                   1082 ;	8052Explorer.c:244: putchar('0');
      0003AD 90 00 30         [24] 1083 	mov	dptr,#0x0030
      0003B0 C0 07            [24] 1084 	push	ar7
      0003B2 C0 06            [24] 1085 	push	ar6
      0003B4 C0 05            [24] 1086 	push	ar5
      0003B6 C0 04            [24] 1087 	push	ar4
      0003B8 12r00r00         [24] 1088 	lcall	_putchar
      0003BB D0 04            [24] 1089 	pop	ar4
      0003BD D0 05            [24] 1090 	pop	ar5
      0003BF D0 06            [24] 1091 	pop	ar6
      0003C1 D0 07            [24] 1092 	pop	ar7
      0003C3                       1093 00114$:
                                   1094 ;	8052Explorer.c:246: printf_tiny("%x\r", checksum & 0xFF);
      0003C3 7C 00            [12] 1095 	mov	r4,#0x00
      0003C5 C0 07            [24] 1096 	push	ar7
      0003C7 C0 06            [24] 1097 	push	ar6
      0003C9 C0 05            [24] 1098 	push	ar5
      0003CB C0 04            [24] 1099 	push	ar4
      0003CD 74r10            [12] 1100 	mov	a,#___str_80
      0003CF C0 E0            [24] 1101 	push	acc
      0003D1 74s08            [12] 1102 	mov	a,#(___str_80 >> 8)
      0003D3 C0 E0            [24] 1103 	push	acc
      0003D5 12r00r00         [24] 1104 	lcall	_printf_tiny
      0003D8 E5 81            [12] 1105 	mov	a,sp
      0003DA 24 FC            [12] 1106 	add	a,#0xfc
      0003DC F5 81            [12] 1107 	mov	sp,a
      0003DE D0 06            [24] 1108 	pop	ar6
      0003E0 D0 07            [24] 1109 	pop	ar7
                                   1110 ;	8052Explorer.c:215: for (unsigned short indirizzo = 0; indirizzo <= EEPROMSIZE; indirizzo += 16){
      0003E2 8E 04            [24] 1111 	mov	ar4,r6
      0003E4 8F 05            [24] 1112 	mov	ar5,r7
      0003E6 74 10            [12] 1113 	mov	a,#0x10
      0003E8 2C               [12] 1114 	add	a,r4
      0003E9 FC               [12] 1115 	mov	r4,a
      0003EA E4               [12] 1116 	clr	a
      0003EB 3D               [12] 1117 	addc	a,r5
      0003EC FD               [12] 1118 	mov	r5,a
      0003ED 8C 06            [24] 1119 	mov	ar6,r4
      0003EF 8D 07            [24] 1120 	mov	ar7,r5
      0003F1 02r01rEF         [24] 1121 	ljmp	00120$
      0003F4                       1122 00115$:
                                   1123 ;	8052Explorer.c:248: printf_tiny("%s", ":00000001FF");
      0003F4 74r17            [12] 1124 	mov	a,#___str_82
      0003F6 C0 E0            [24] 1125 	push	acc
      0003F8 74s08            [12] 1126 	mov	a,#(___str_82 >> 8)
      0003FA C0 E0            [24] 1127 	push	acc
      0003FC 74 80            [12] 1128 	mov	a,#0x80
      0003FE C0 E0            [24] 1129 	push	acc
      000400 74r14            [12] 1130 	mov	a,#___str_81
      000402 C0 E0            [24] 1131 	push	acc
      000404 74s08            [12] 1132 	mov	a,#(___str_81 >> 8)
      000406 C0 E0            [24] 1133 	push	acc
      000408 12r00r00         [24] 1134 	lcall	_printf_tiny
      00040B E5 81            [12] 1135 	mov	a,sp
      00040D 24 FB            [12] 1136 	add	a,#0xfb
      00040F F5 81            [12] 1137 	mov	sp,a
                                   1138 ;	8052Explorer.c:249: putchar('\r');
      000411 90 00 0D         [24] 1139 	mov	dptr,#0x000d
      000414 12r00r00         [24] 1140 	lcall	_putchar
                                   1141 ;	8052Explorer.c:250: putchar('\r');
      000417 90 00 0D         [24] 1142 	mov	dptr,#0x000d
                                   1143 ;	8052Explorer.c:252: }
      00041A 02r00r00         [24] 1144 	ljmp	_putchar
                                   1145 ;------------------------------------------------------------
                                   1146 ;Allocation info for local variables in function 'dumpCODE'
                                   1147 ;------------------------------------------------------------
                                   1148 ;puntatore                 Allocated to registers 
                                   1149 ;indirizzo                 Allocated with name '_dumpCODE_indirizzo_131072_56'
                                   1150 ;posto                     Allocated with name '_dumpCODE_posto_262144_62'
                                   1151 ;posto                     Allocated with name '_dumpCODE_posto_262144_65'
                                   1152 ;------------------------------------------------------------
                                   1153 ;	8052Explorer.c:255: void dumpCODE () {
                                   1154 ;	-----------------------------------------
                                   1155 ;	 function dumpCODE
                                   1156 ;	-----------------------------------------
      00041D                       1157 _dumpCODE:
                                   1158 ;	8052Explorer.c:256: unsigned char *puntatore = codice;
      00041D 7D 00            [12] 1159 	mov	r5,#_codice
      00041F 7E 00            [12] 1160 	mov	r6,#(_codice >> 8)
      000421 7F 80            [12] 1161 	mov	r7,#0x80
                                   1162 ;	8052Explorer.c:258: puts("Dumping code:");
      000423 90r08r23         [24] 1163 	mov	dptr,#___str_83
      000426 75 F0 80         [24] 1164 	mov	b,#0x80
      000429 C0 07            [24] 1165 	push	ar7
      00042B C0 06            [24] 1166 	push	ar6
      00042D C0 05            [24] 1167 	push	ar5
      00042F 12r00r00         [24] 1168 	lcall	_puts
      000432 D0 05            [24] 1169 	pop	ar5
      000434 D0 06            [24] 1170 	pop	ar6
      000436 D0 07            [24] 1171 	pop	ar7
                                   1172 ;	8052Explorer.c:259: for (unsigned int indirizzo = 0; indirizzo <= CODESIZE; indirizzo += 16 ) {
      000438 E4               [12] 1173 	clr	a
      000439 F5*00            [12] 1174 	mov	_dumpCODE_indirizzo_131072_56,a
      00043B F5*01            [12] 1175 	mov	(_dumpCODE_indirizzo_131072_56 + 1),a
      00043D                       1176 00126$:
      00043D C3               [12] 1177 	clr	c
      00043E 74 FF            [12] 1178 	mov	a,#0xff
      000440 95*00            [12] 1179 	subb	a,_dumpCODE_indirizzo_131072_56
      000442 74 1F            [12] 1180 	mov	a,#0x1f
      000444 95*01            [12] 1181 	subb	a,(_dumpCODE_indirizzo_131072_56 + 1)
      000446 50 03            [24] 1182 	jnc	00188$
      000448 02r06r0B         [24] 1183 	ljmp	00118$
      00044B                       1184 00188$:
                                   1185 ;	8052Explorer.c:260: if (indirizzo < 0x10) {
      00044B C3               [12] 1186 	clr	c
      00044C E5*00            [12] 1187 	mov	a,_dumpCODE_indirizzo_131072_56
      00044E 94 10            [12] 1188 	subb	a,#0x10
      000450 E5*01            [12] 1189 	mov	a,(_dumpCODE_indirizzo_131072_56 + 1)
      000452 94 00            [12] 1190 	subb	a,#0x00
      000454 50 23            [24] 1191 	jnc	00108$
                                   1192 ;	8052Explorer.c:261: printf_tiny("000%x  ", indirizzo);
      000456 C0 07            [24] 1193 	push	ar7
      000458 C0 06            [24] 1194 	push	ar6
      00045A C0 05            [24] 1195 	push	ar5
      00045C C0*00            [24] 1196 	push	_dumpCODE_indirizzo_131072_56
      00045E C0*01            [24] 1197 	push	(_dumpCODE_indirizzo_131072_56 + 1)
      000460 74rAD            [12] 1198 	mov	a,#___str_66
      000462 C0 E0            [24] 1199 	push	acc
      000464 74s07            [12] 1200 	mov	a,#(___str_66 >> 8)
      000466 C0 E0            [24] 1201 	push	acc
      000468 12r00r00         [24] 1202 	lcall	_printf_tiny
      00046B E5 81            [12] 1203 	mov	a,sp
      00046D 24 FC            [12] 1204 	add	a,#0xfc
      00046F F5 81            [12] 1205 	mov	sp,a
      000471 D0 05            [24] 1206 	pop	ar5
      000473 D0 06            [24] 1207 	pop	ar6
      000475 D0 07            [24] 1208 	pop	ar7
      000477 80 73            [24] 1209 	sjmp	00136$
      000479                       1210 00108$:
                                   1211 ;	8052Explorer.c:262: } else if (indirizzo < 0x100) {
      000479 74 FF            [12] 1212 	mov	a,#0x100 - 0x01
      00047B 25*01            [12] 1213 	add	a,(_dumpCODE_indirizzo_131072_56 + 1)
      00047D 40 23            [24] 1214 	jc	00105$
                                   1215 ;	8052Explorer.c:263: printf_tiny("00%x  ", indirizzo);
      00047F C0 07            [24] 1216 	push	ar7
      000481 C0 06            [24] 1217 	push	ar6
      000483 C0 05            [24] 1218 	push	ar5
      000485 C0*00            [24] 1219 	push	_dumpCODE_indirizzo_131072_56
      000487 C0*01            [24] 1220 	push	(_dumpCODE_indirizzo_131072_56 + 1)
      000489 74rB5            [12] 1221 	mov	a,#___str_67
      00048B C0 E0            [24] 1222 	push	acc
      00048D 74s07            [12] 1223 	mov	a,#(___str_67 >> 8)
      00048F C0 E0            [24] 1224 	push	acc
      000491 12r00r00         [24] 1225 	lcall	_printf_tiny
      000494 E5 81            [12] 1226 	mov	a,sp
      000496 24 FC            [12] 1227 	add	a,#0xfc
      000498 F5 81            [12] 1228 	mov	sp,a
      00049A D0 05            [24] 1229 	pop	ar5
      00049C D0 06            [24] 1230 	pop	ar6
      00049E D0 07            [24] 1231 	pop	ar7
      0004A0 80 4A            [24] 1232 	sjmp	00136$
      0004A2                       1233 00105$:
                                   1234 ;	8052Explorer.c:264: } else if (indirizzo < 0x1000) {
      0004A2 74 F0            [12] 1235 	mov	a,#0x100 - 0x10
      0004A4 25*01            [12] 1236 	add	a,(_dumpCODE_indirizzo_131072_56 + 1)
      0004A6 40 23            [24] 1237 	jc	00102$
                                   1238 ;	8052Explorer.c:265: printf_tiny("0%x  ", indirizzo);
      0004A8 C0 07            [24] 1239 	push	ar7
      0004AA C0 06            [24] 1240 	push	ar6
      0004AC C0 05            [24] 1241 	push	ar5
      0004AE C0*00            [24] 1242 	push	_dumpCODE_indirizzo_131072_56
      0004B0 C0*01            [24] 1243 	push	(_dumpCODE_indirizzo_131072_56 + 1)
      0004B2 74rBC            [12] 1244 	mov	a,#___str_68
      0004B4 C0 E0            [24] 1245 	push	acc
      0004B6 74s07            [12] 1246 	mov	a,#(___str_68 >> 8)
      0004B8 C0 E0            [24] 1247 	push	acc
      0004BA 12r00r00         [24] 1248 	lcall	_printf_tiny
      0004BD E5 81            [12] 1249 	mov	a,sp
      0004BF 24 FC            [12] 1250 	add	a,#0xfc
      0004C1 F5 81            [12] 1251 	mov	sp,a
      0004C3 D0 05            [24] 1252 	pop	ar5
      0004C5 D0 06            [24] 1253 	pop	ar6
      0004C7 D0 07            [24] 1254 	pop	ar7
      0004C9 80 21            [24] 1255 	sjmp	00136$
      0004CB                       1256 00102$:
                                   1257 ;	8052Explorer.c:267: printf_tiny("%x  ", indirizzo);
      0004CB C0 07            [24] 1258 	push	ar7
      0004CD C0 06            [24] 1259 	push	ar6
      0004CF C0 05            [24] 1260 	push	ar5
      0004D1 C0*00            [24] 1261 	push	_dumpCODE_indirizzo_131072_56
      0004D3 C0*01            [24] 1262 	push	(_dumpCODE_indirizzo_131072_56 + 1)
      0004D5 74rC2            [12] 1263 	mov	a,#___str_69
      0004D7 C0 E0            [24] 1264 	push	acc
      0004D9 74s07            [12] 1265 	mov	a,#(___str_69 >> 8)
      0004DB C0 E0            [24] 1266 	push	acc
      0004DD 12r00r00         [24] 1267 	lcall	_printf_tiny
      0004E0 E5 81            [12] 1268 	mov	a,sp
      0004E2 24 FC            [12] 1269 	add	a,#0xfc
      0004E4 F5 81            [12] 1270 	mov	sp,a
      0004E6 D0 05            [24] 1271 	pop	ar5
      0004E8 D0 06            [24] 1272 	pop	ar6
      0004EA D0 07            [24] 1273 	pop	ar7
                                   1274 ;	8052Explorer.c:269: for (unsigned int posto = 0; posto < 16; posto++ ) {
      0004EC                       1275 00136$:
      0004EC 8D 00            [24] 1276 	mov	ar0,r5
      0004EE 8E 01            [24] 1277 	mov	ar1,r6
      0004F0 8F 02            [24] 1278 	mov	ar2,r7
      0004F2 E4               [12] 1279 	clr	a
      0004F3 F5*02            [12] 1280 	mov	_dumpCODE_posto_262144_62,a
      0004F5 F5*03            [12] 1281 	mov	(_dumpCODE_posto_262144_62 + 1),a
      0004F7                       1282 00120$:
      0004F7 C3               [12] 1283 	clr	c
      0004F8 E5*02            [12] 1284 	mov	a,_dumpCODE_posto_262144_62
      0004FA 94 10            [12] 1285 	subb	a,#0x10
      0004FC E5*03            [12] 1286 	mov	a,(_dumpCODE_posto_262144_62 + 1)
      0004FE 94 00            [12] 1287 	subb	a,#0x00
      000500 50 5D            [24] 1288 	jnc	00112$
                                   1289 ;	8052Explorer.c:270: if ( *puntatore < 16 ) {
      000502 88 82            [24] 1290 	mov	dpl,r0
      000504 89 83            [24] 1291 	mov	dph,r1
      000506 8A F0            [24] 1292 	mov	b,r2
      000508 12r00r00         [24] 1293 	lcall	__gptrget
      00050B FC               [12] 1294 	mov	r4,a
      00050C BC 10 00         [24] 1295 	cjne	r4,#0x10,00193$
      00050F                       1296 00193$:
      00050F 50 12            [24] 1297 	jnc	00111$
                                   1298 ;	8052Explorer.c:271: putchar('0');
      000511 90 00 30         [24] 1299 	mov	dptr,#0x0030
      000514 C0 02            [24] 1300 	push	ar2
      000516 C0 01            [24] 1301 	push	ar1
      000518 C0 00            [24] 1302 	push	ar0
      00051A 12r00r00         [24] 1303 	lcall	_putchar
      00051D D0 00            [24] 1304 	pop	ar0
      00051F D0 01            [24] 1305 	pop	ar1
      000521 D0 02            [24] 1306 	pop	ar2
      000523                       1307 00111$:
                                   1308 ;	8052Explorer.c:273: printf_tiny("%x ", *puntatore);
      000523 88 82            [24] 1309 	mov	dpl,r0
      000525 89 83            [24] 1310 	mov	dph,r1
      000527 8A F0            [24] 1311 	mov	b,r2
      000529 12r00r00         [24] 1312 	lcall	__gptrget
      00052C FC               [12] 1313 	mov	r4,a
      00052D A3               [24] 1314 	inc	dptr
      00052E A8 82            [24] 1315 	mov	r0,dpl
      000530 A9 83            [24] 1316 	mov	r1,dph
      000532 7B 00            [12] 1317 	mov	r3,#0x00
      000534 C0 02            [24] 1318 	push	ar2
      000536 C0 01            [24] 1319 	push	ar1
      000538 C0 00            [24] 1320 	push	ar0
      00053A C0 04            [24] 1321 	push	ar4
      00053C C0 03            [24] 1322 	push	ar3
      00053E 74rC7            [12] 1323 	mov	a,#___str_70
      000540 C0 E0            [24] 1324 	push	acc
      000542 74s07            [12] 1325 	mov	a,#(___str_70 >> 8)
      000544 C0 E0            [24] 1326 	push	acc
      000546 12r00r00         [24] 1327 	lcall	_printf_tiny
      000549 E5 81            [12] 1328 	mov	a,sp
      00054B 24 FC            [12] 1329 	add	a,#0xfc
      00054D F5 81            [12] 1330 	mov	sp,a
      00054F D0 00            [24] 1331 	pop	ar0
      000551 D0 01            [24] 1332 	pop	ar1
      000553 D0 02            [24] 1333 	pop	ar2
                                   1334 ;	8052Explorer.c:274: puntatore++;
                                   1335 ;	8052Explorer.c:269: for (unsigned int posto = 0; posto < 16; posto++ ) {
      000555 05*02            [12] 1336 	inc	_dumpCODE_posto_262144_62
      000557 E4               [12] 1337 	clr	a
      000558 B5*02 9C         [24] 1338 	cjne	a,_dumpCODE_posto_262144_62,00120$
      00055B 05*03            [12] 1339 	inc	(_dumpCODE_posto_262144_62 + 1)
      00055D 80 98            [24] 1340 	sjmp	00120$
      00055F                       1341 00112$:
                                   1342 ;	8052Explorer.c:276: printf_tiny(" |");
      00055F C0 02            [24] 1343 	push	ar2
      000561 C0 01            [24] 1344 	push	ar1
      000563 C0 00            [24] 1345 	push	ar0
      000565 74rCB            [12] 1346 	mov	a,#___str_71
      000567 C0 E0            [24] 1347 	push	acc
      000569 74s07            [12] 1348 	mov	a,#(___str_71 >> 8)
      00056B C0 E0            [24] 1349 	push	acc
      00056D 12r00r00         [24] 1350 	lcall	_printf_tiny
      000570 15 81            [12] 1351 	dec	sp
      000572 15 81            [12] 1352 	dec	sp
      000574 D0 00            [24] 1353 	pop	ar0
      000576 D0 01            [24] 1354 	pop	ar1
      000578 D0 02            [24] 1355 	pop	ar2
                                   1356 ;	8052Explorer.c:277: puntatore -= 16;
      00057A E8               [12] 1357 	mov	a,r0
      00057B 24 F0            [12] 1358 	add	a,#0xf0
      00057D FC               [12] 1359 	mov	r4,a
      00057E E9               [12] 1360 	mov	a,r1
      00057F 34 FF            [12] 1361 	addc	a,#0xff
      000581 FB               [12] 1362 	mov	r3,a
                                   1363 ;	8052Explorer.c:278: for (unsigned char posto = 0; posto < 16; posto++ ) {
      000582 75*04 00         [24] 1364 	mov	_dumpCODE_posto_262144_65,#0x00
      000585                       1365 00123$:
      000585 74 F0            [12] 1366 	mov	a,#0x100 - 0x10
      000587 25*04            [12] 1367 	add	a,_dumpCODE_posto_262144_65
      000589 40 54            [24] 1368 	jc	00142$
                                   1369 ;	8052Explorer.c:279: if ( *puntatore < 0x20 || *puntatore > 0x7E ) {
      00058B 8C 82            [24] 1370 	mov	dpl,r4
      00058D 8B 83            [24] 1371 	mov	dph,r3
      00058F 8A F0            [24] 1372 	mov	b,r2
      000591 12r00r00         [24] 1373 	lcall	__gptrget
      000594 F8               [12] 1374 	mov	r0,a
      000595 B8 20 00         [24] 1375 	cjne	r0,#0x20,00197$
      000598                       1376 00197$:
      000598 40 05            [24] 1377 	jc	00113$
      00059A E8               [12] 1378 	mov	a,r0
      00059B 24 81            [12] 1379 	add	a,#0xff - 0x7e
      00059D 50 14            [24] 1380 	jnc	00114$
      00059F                       1381 00113$:
                                   1382 ;	8052Explorer.c:280: putchar('.');
      00059F 90 00 2E         [24] 1383 	mov	dptr,#0x002e
      0005A2 C0 04            [24] 1384 	push	ar4
      0005A4 C0 03            [24] 1385 	push	ar3
      0005A6 C0 02            [24] 1386 	push	ar2
      0005A8 12r00r00         [24] 1387 	lcall	_putchar
      0005AB D0 02            [24] 1388 	pop	ar2
      0005AD D0 03            [24] 1389 	pop	ar3
      0005AF D0 04            [24] 1390 	pop	ar4
      0005B1 80 23            [24] 1391 	sjmp	00115$
      0005B3                       1392 00114$:
                                   1393 ;	8052Explorer.c:282: printf_tiny("%c", *puntatore);
      0005B3 79 00            [12] 1394 	mov	r1,#0x00
      0005B5 C0 04            [24] 1395 	push	ar4
      0005B7 C0 03            [24] 1396 	push	ar3
      0005B9 C0 02            [24] 1397 	push	ar2
      0005BB C0 00            [24] 1398 	push	ar0
      0005BD C0 01            [24] 1399 	push	ar1
      0005BF 74rCE            [12] 1400 	mov	a,#___str_72
      0005C1 C0 E0            [24] 1401 	push	acc
      0005C3 74s07            [12] 1402 	mov	a,#(___str_72 >> 8)
      0005C5 C0 E0            [24] 1403 	push	acc
      0005C7 12r00r00         [24] 1404 	lcall	_printf_tiny
      0005CA E5 81            [12] 1405 	mov	a,sp
      0005CC 24 FC            [12] 1406 	add	a,#0xfc
      0005CE F5 81            [12] 1407 	mov	sp,a
      0005D0 D0 02            [24] 1408 	pop	ar2
      0005D2 D0 03            [24] 1409 	pop	ar3
      0005D4 D0 04            [24] 1410 	pop	ar4
      0005D6                       1411 00115$:
                                   1412 ;	8052Explorer.c:284: puntatore++;
      0005D6 0C               [12] 1413 	inc	r4
      0005D7 BC 00 01         [24] 1414 	cjne	r4,#0x00,00200$
      0005DA 0B               [12] 1415 	inc	r3
      0005DB                       1416 00200$:
                                   1417 ;	8052Explorer.c:278: for (unsigned char posto = 0; posto < 16; posto++ ) {
      0005DB 05*04            [12] 1418 	inc	_dumpCODE_posto_262144_65
      0005DD 80 A6            [24] 1419 	sjmp	00123$
      0005DF                       1420 00142$:
      0005DF 8C 05            [24] 1421 	mov	ar5,r4
      0005E1 8B 06            [24] 1422 	mov	ar6,r3
      0005E3 8A 07            [24] 1423 	mov	ar7,r2
                                   1424 ;	8052Explorer.c:286: putchar('|');
      0005E5 90 00 7C         [24] 1425 	mov	dptr,#0x007c
      0005E8 C0 07            [24] 1426 	push	ar7
      0005EA C0 06            [24] 1427 	push	ar6
      0005EC C0 05            [24] 1428 	push	ar5
      0005EE 12r00r00         [24] 1429 	lcall	_putchar
                                   1430 ;	8052Explorer.c:287: putchar('\r');
      0005F1 90 00 0D         [24] 1431 	mov	dptr,#0x000d
      0005F4 12r00r00         [24] 1432 	lcall	_putchar
      0005F7 D0 05            [24] 1433 	pop	ar5
      0005F9 D0 06            [24] 1434 	pop	ar6
      0005FB D0 07            [24] 1435 	pop	ar7
                                   1436 ;	8052Explorer.c:259: for (unsigned int indirizzo = 0; indirizzo <= CODESIZE; indirizzo += 16 ) {
      0005FD 74 10            [12] 1437 	mov	a,#0x10
      0005FF 25*00            [12] 1438 	add	a,_dumpCODE_indirizzo_131072_56
      000601 F5*00            [12] 1439 	mov	_dumpCODE_indirizzo_131072_56,a
      000603 E4               [12] 1440 	clr	a
      000604 35*01            [12] 1441 	addc	a,(_dumpCODE_indirizzo_131072_56 + 1)
      000606 F5*01            [12] 1442 	mov	(_dumpCODE_indirizzo_131072_56 + 1),a
      000608 02r04r3D         [24] 1443 	ljmp	00126$
      00060B                       1444 00118$:
                                   1445 ;	8052Explorer.c:289: putchar('\r');
      00060B 90 00 0D         [24] 1446 	mov	dptr,#0x000d
                                   1447 ;	8052Explorer.c:291: }
      00060E 02r00r00         [24] 1448 	ljmp	_putchar
                                   1449 ;------------------------------------------------------------
                                   1450 ;Allocation info for local variables in function 'dumpRAM'
                                   1451 ;------------------------------------------------------------
                                   1452 ;puntatore                 Allocated to registers 
                                   1453 ;indirizzo                 Allocated with name '_dumpRAM_indirizzo_131072_70'
                                   1454 ;posto                     Allocated with name '_dumpRAM_posto_262144_76'
                                   1455 ;posto                     Allocated with name '_dumpRAM_posto_262144_79'
                                   1456 ;------------------------------------------------------------
                                   1457 ;	8052Explorer.c:293: void dumpRAM () {
                                   1458 ;	-----------------------------------------
                                   1459 ;	 function dumpRAM
                                   1460 ;	-----------------------------------------
      000611                       1461 _dumpRAM:
                                   1462 ;	8052Explorer.c:294: unsigned char *puntatore = dati;
      000611 7D 00            [12] 1463 	mov	r5,#_dati
      000613 7E 00            [12] 1464 	mov	r6,#0x00
      000615 7F 40            [12] 1465 	mov	r7,#0x40
                                   1466 ;	8052Explorer.c:296: puts("Dumping ram memory:");
      000617 90r08r31         [24] 1467 	mov	dptr,#___str_84
      00061A 75 F0 80         [24] 1468 	mov	b,#0x80
      00061D C0 07            [24] 1469 	push	ar7
      00061F C0 06            [24] 1470 	push	ar6
      000621 C0 05            [24] 1471 	push	ar5
      000623 12r00r00         [24] 1472 	lcall	_puts
      000626 D0 05            [24] 1473 	pop	ar5
      000628 D0 06            [24] 1474 	pop	ar6
      00062A D0 07            [24] 1475 	pop	ar7
                                   1476 ;	8052Explorer.c:297: for (unsigned int indirizzo = 0; indirizzo <= 0xFF; indirizzo += 16 ) {
      00062C E4               [12] 1477 	clr	a
      00062D F5*05            [12] 1478 	mov	_dumpRAM_indirizzo_131072_70,a
      00062F F5*06            [12] 1479 	mov	(_dumpRAM_indirizzo_131072_70 + 1),a
      000631                       1480 00126$:
      000631 C3               [12] 1481 	clr	c
      000632 74 FF            [12] 1482 	mov	a,#0xff
      000634 95*05            [12] 1483 	subb	a,_dumpRAM_indirizzo_131072_70
      000636 E4               [12] 1484 	clr	a
      000637 95*06            [12] 1485 	subb	a,(_dumpRAM_indirizzo_131072_70 + 1)
      000639 50 03            [24] 1486 	jnc	00188$
      00063B 02r07rFE         [24] 1487 	ljmp	00118$
      00063E                       1488 00188$:
                                   1489 ;	8052Explorer.c:298: if (indirizzo < 0x10) {
      00063E C3               [12] 1490 	clr	c
      00063F E5*05            [12] 1491 	mov	a,_dumpRAM_indirizzo_131072_70
      000641 94 10            [12] 1492 	subb	a,#0x10
      000643 E5*06            [12] 1493 	mov	a,(_dumpRAM_indirizzo_131072_70 + 1)
      000645 94 00            [12] 1494 	subb	a,#0x00
      000647 50 23            [24] 1495 	jnc	00108$
                                   1496 ;	8052Explorer.c:299: printf_tiny("000%x  ", indirizzo);
      000649 C0 07            [24] 1497 	push	ar7
      00064B C0 06            [24] 1498 	push	ar6
      00064D C0 05            [24] 1499 	push	ar5
      00064F C0*05            [24] 1500 	push	_dumpRAM_indirizzo_131072_70
      000651 C0*06            [24] 1501 	push	(_dumpRAM_indirizzo_131072_70 + 1)
      000653 74rAD            [12] 1502 	mov	a,#___str_66
      000655 C0 E0            [24] 1503 	push	acc
      000657 74s07            [12] 1504 	mov	a,#(___str_66 >> 8)
      000659 C0 E0            [24] 1505 	push	acc
      00065B 12r00r00         [24] 1506 	lcall	_printf_tiny
      00065E E5 81            [12] 1507 	mov	a,sp
      000660 24 FC            [12] 1508 	add	a,#0xfc
      000662 F5 81            [12] 1509 	mov	sp,a
      000664 D0 05            [24] 1510 	pop	ar5
      000666 D0 06            [24] 1511 	pop	ar6
      000668 D0 07            [24] 1512 	pop	ar7
      00066A 80 73            [24] 1513 	sjmp	00136$
      00066C                       1514 00108$:
                                   1515 ;	8052Explorer.c:300: } else if (indirizzo < 0x100) {
      00066C 74 FF            [12] 1516 	mov	a,#0x100 - 0x01
      00066E 25*06            [12] 1517 	add	a,(_dumpRAM_indirizzo_131072_70 + 1)
      000670 40 23            [24] 1518 	jc	00105$
                                   1519 ;	8052Explorer.c:301: printf_tiny("00%x  ", indirizzo);
      000672 C0 07            [24] 1520 	push	ar7
      000674 C0 06            [24] 1521 	push	ar6
      000676 C0 05            [24] 1522 	push	ar5
      000678 C0*05            [24] 1523 	push	_dumpRAM_indirizzo_131072_70
      00067A C0*06            [24] 1524 	push	(_dumpRAM_indirizzo_131072_70 + 1)
      00067C 74rB5            [12] 1525 	mov	a,#___str_67
      00067E C0 E0            [24] 1526 	push	acc
      000680 74s07            [12] 1527 	mov	a,#(___str_67 >> 8)
      000682 C0 E0            [24] 1528 	push	acc
      000684 12r00r00         [24] 1529 	lcall	_printf_tiny
      000687 E5 81            [12] 1530 	mov	a,sp
      000689 24 FC            [12] 1531 	add	a,#0xfc
      00068B F5 81            [12] 1532 	mov	sp,a
      00068D D0 05            [24] 1533 	pop	ar5
      00068F D0 06            [24] 1534 	pop	ar6
      000691 D0 07            [24] 1535 	pop	ar7
      000693 80 4A            [24] 1536 	sjmp	00136$
      000695                       1537 00105$:
                                   1538 ;	8052Explorer.c:302: } else if (indirizzo < 0x1000) {
      000695 74 F0            [12] 1539 	mov	a,#0x100 - 0x10
      000697 25*06            [12] 1540 	add	a,(_dumpRAM_indirizzo_131072_70 + 1)
      000699 40 23            [24] 1541 	jc	00102$
                                   1542 ;	8052Explorer.c:303: printf_tiny("0%x  ", indirizzo);
      00069B C0 07            [24] 1543 	push	ar7
      00069D C0 06            [24] 1544 	push	ar6
      00069F C0 05            [24] 1545 	push	ar5
      0006A1 C0*05            [24] 1546 	push	_dumpRAM_indirizzo_131072_70
      0006A3 C0*06            [24] 1547 	push	(_dumpRAM_indirizzo_131072_70 + 1)
      0006A5 74rBC            [12] 1548 	mov	a,#___str_68
      0006A7 C0 E0            [24] 1549 	push	acc
      0006A9 74s07            [12] 1550 	mov	a,#(___str_68 >> 8)
      0006AB C0 E0            [24] 1551 	push	acc
      0006AD 12r00r00         [24] 1552 	lcall	_printf_tiny
      0006B0 E5 81            [12] 1553 	mov	a,sp
      0006B2 24 FC            [12] 1554 	add	a,#0xfc
      0006B4 F5 81            [12] 1555 	mov	sp,a
      0006B6 D0 05            [24] 1556 	pop	ar5
      0006B8 D0 06            [24] 1557 	pop	ar6
      0006BA D0 07            [24] 1558 	pop	ar7
      0006BC 80 21            [24] 1559 	sjmp	00136$
      0006BE                       1560 00102$:
                                   1561 ;	8052Explorer.c:305: printf_tiny("%x  ", indirizzo);
      0006BE C0 07            [24] 1562 	push	ar7
      0006C0 C0 06            [24] 1563 	push	ar6
      0006C2 C0 05            [24] 1564 	push	ar5
      0006C4 C0*05            [24] 1565 	push	_dumpRAM_indirizzo_131072_70
      0006C6 C0*06            [24] 1566 	push	(_dumpRAM_indirizzo_131072_70 + 1)
      0006C8 74rC2            [12] 1567 	mov	a,#___str_69
      0006CA C0 E0            [24] 1568 	push	acc
      0006CC 74s07            [12] 1569 	mov	a,#(___str_69 >> 8)
      0006CE C0 E0            [24] 1570 	push	acc
      0006D0 12r00r00         [24] 1571 	lcall	_printf_tiny
      0006D3 E5 81            [12] 1572 	mov	a,sp
      0006D5 24 FC            [12] 1573 	add	a,#0xfc
      0006D7 F5 81            [12] 1574 	mov	sp,a
      0006D9 D0 05            [24] 1575 	pop	ar5
      0006DB D0 06            [24] 1576 	pop	ar6
      0006DD D0 07            [24] 1577 	pop	ar7
                                   1578 ;	8052Explorer.c:307: for (unsigned int posto = 0; posto < 16; posto++ ) {
      0006DF                       1579 00136$:
      0006DF 8D 00            [24] 1580 	mov	ar0,r5
      0006E1 8E 01            [24] 1581 	mov	ar1,r6
      0006E3 8F 02            [24] 1582 	mov	ar2,r7
      0006E5 E4               [12] 1583 	clr	a
      0006E6 F5*07            [12] 1584 	mov	_dumpRAM_posto_262144_76,a
      0006E8 F5*08            [12] 1585 	mov	(_dumpRAM_posto_262144_76 + 1),a
      0006EA                       1586 00120$:
      0006EA C3               [12] 1587 	clr	c
      0006EB E5*07            [12] 1588 	mov	a,_dumpRAM_posto_262144_76
      0006ED 94 10            [12] 1589 	subb	a,#0x10
      0006EF E5*08            [12] 1590 	mov	a,(_dumpRAM_posto_262144_76 + 1)
      0006F1 94 00            [12] 1591 	subb	a,#0x00
      0006F3 50 5D            [24] 1592 	jnc	00112$
                                   1593 ;	8052Explorer.c:308: if ( *puntatore < 16 ) {
      0006F5 88 82            [24] 1594 	mov	dpl,r0
      0006F7 89 83            [24] 1595 	mov	dph,r1
      0006F9 8A F0            [24] 1596 	mov	b,r2
      0006FB 12r00r00         [24] 1597 	lcall	__gptrget
      0006FE FC               [12] 1598 	mov	r4,a
      0006FF BC 10 00         [24] 1599 	cjne	r4,#0x10,00193$
      000702                       1600 00193$:
      000702 50 12            [24] 1601 	jnc	00111$
                                   1602 ;	8052Explorer.c:309: putchar('0');
      000704 90 00 30         [24] 1603 	mov	dptr,#0x0030
      000707 C0 02            [24] 1604 	push	ar2
      000709 C0 01            [24] 1605 	push	ar1
      00070B C0 00            [24] 1606 	push	ar0
      00070D 12r00r00         [24] 1607 	lcall	_putchar
      000710 D0 00            [24] 1608 	pop	ar0
      000712 D0 01            [24] 1609 	pop	ar1
      000714 D0 02            [24] 1610 	pop	ar2
      000716                       1611 00111$:
                                   1612 ;	8052Explorer.c:311: printf_tiny("%x ", *puntatore);
      000716 88 82            [24] 1613 	mov	dpl,r0
      000718 89 83            [24] 1614 	mov	dph,r1
      00071A 8A F0            [24] 1615 	mov	b,r2
      00071C 12r00r00         [24] 1616 	lcall	__gptrget
      00071F FC               [12] 1617 	mov	r4,a
      000720 A3               [24] 1618 	inc	dptr
      000721 A8 82            [24] 1619 	mov	r0,dpl
      000723 A9 83            [24] 1620 	mov	r1,dph
      000725 7B 00            [12] 1621 	mov	r3,#0x00
      000727 C0 02            [24] 1622 	push	ar2
      000729 C0 01            [24] 1623 	push	ar1
      00072B C0 00            [24] 1624 	push	ar0
      00072D C0 04            [24] 1625 	push	ar4
      00072F C0 03            [24] 1626 	push	ar3
      000731 74rC7            [12] 1627 	mov	a,#___str_70
      000733 C0 E0            [24] 1628 	push	acc
      000735 74s07            [12] 1629 	mov	a,#(___str_70 >> 8)
      000737 C0 E0            [24] 1630 	push	acc
      000739 12r00r00         [24] 1631 	lcall	_printf_tiny
      00073C E5 81            [12] 1632 	mov	a,sp
      00073E 24 FC            [12] 1633 	add	a,#0xfc
      000740 F5 81            [12] 1634 	mov	sp,a
      000742 D0 00            [24] 1635 	pop	ar0
      000744 D0 01            [24] 1636 	pop	ar1
      000746 D0 02            [24] 1637 	pop	ar2
                                   1638 ;	8052Explorer.c:312: puntatore++;
                                   1639 ;	8052Explorer.c:307: for (unsigned int posto = 0; posto < 16; posto++ ) {
      000748 05*07            [12] 1640 	inc	_dumpRAM_posto_262144_76
      00074A E4               [12] 1641 	clr	a
      00074B B5*07 9C         [24] 1642 	cjne	a,_dumpRAM_posto_262144_76,00120$
      00074E 05*08            [12] 1643 	inc	(_dumpRAM_posto_262144_76 + 1)
      000750 80 98            [24] 1644 	sjmp	00120$
      000752                       1645 00112$:
                                   1646 ;	8052Explorer.c:314: printf_tiny(" |");
      000752 C0 02            [24] 1647 	push	ar2
      000754 C0 01            [24] 1648 	push	ar1
      000756 C0 00            [24] 1649 	push	ar0
      000758 74rCB            [12] 1650 	mov	a,#___str_71
      00075A C0 E0            [24] 1651 	push	acc
      00075C 74s07            [12] 1652 	mov	a,#(___str_71 >> 8)
      00075E C0 E0            [24] 1653 	push	acc
      000760 12r00r00         [24] 1654 	lcall	_printf_tiny
      000763 15 81            [12] 1655 	dec	sp
      000765 15 81            [12] 1656 	dec	sp
      000767 D0 00            [24] 1657 	pop	ar0
      000769 D0 01            [24] 1658 	pop	ar1
      00076B D0 02            [24] 1659 	pop	ar2
                                   1660 ;	8052Explorer.c:315: puntatore -= 16;
      00076D E8               [12] 1661 	mov	a,r0
      00076E 24 F0            [12] 1662 	add	a,#0xf0
      000770 FC               [12] 1663 	mov	r4,a
      000771 E9               [12] 1664 	mov	a,r1
      000772 34 FF            [12] 1665 	addc	a,#0xff
      000774 FB               [12] 1666 	mov	r3,a
                                   1667 ;	8052Explorer.c:316: for (unsigned char posto = 0; posto < 16; posto++ ) {
      000775 75*09 00         [24] 1668 	mov	_dumpRAM_posto_262144_79,#0x00
      000778                       1669 00123$:
      000778 74 F0            [12] 1670 	mov	a,#0x100 - 0x10
      00077A 25*09            [12] 1671 	add	a,_dumpRAM_posto_262144_79
      00077C 40 54            [24] 1672 	jc	00142$
                                   1673 ;	8052Explorer.c:317: if ( *puntatore < 0x20 || *puntatore > 0x7E ) {
      00077E 8C 82            [24] 1674 	mov	dpl,r4
      000780 8B 83            [24] 1675 	mov	dph,r3
      000782 8A F0            [24] 1676 	mov	b,r2
      000784 12r00r00         [24] 1677 	lcall	__gptrget
      000787 F8               [12] 1678 	mov	r0,a
      000788 B8 20 00         [24] 1679 	cjne	r0,#0x20,00197$
      00078B                       1680 00197$:
      00078B 40 05            [24] 1681 	jc	00113$
      00078D E8               [12] 1682 	mov	a,r0
      00078E 24 81            [12] 1683 	add	a,#0xff - 0x7e
      000790 50 14            [24] 1684 	jnc	00114$
      000792                       1685 00113$:
                                   1686 ;	8052Explorer.c:318: putchar('.');
      000792 90 00 2E         [24] 1687 	mov	dptr,#0x002e
      000795 C0 04            [24] 1688 	push	ar4
      000797 C0 03            [24] 1689 	push	ar3
      000799 C0 02            [24] 1690 	push	ar2
      00079B 12r00r00         [24] 1691 	lcall	_putchar
      00079E D0 02            [24] 1692 	pop	ar2
      0007A0 D0 03            [24] 1693 	pop	ar3
      0007A2 D0 04            [24] 1694 	pop	ar4
      0007A4 80 23            [24] 1695 	sjmp	00115$
      0007A6                       1696 00114$:
                                   1697 ;	8052Explorer.c:320: printf_tiny("%c", *puntatore);
      0007A6 79 00            [12] 1698 	mov	r1,#0x00
      0007A8 C0 04            [24] 1699 	push	ar4
      0007AA C0 03            [24] 1700 	push	ar3
      0007AC C0 02            [24] 1701 	push	ar2
      0007AE C0 00            [24] 1702 	push	ar0
      0007B0 C0 01            [24] 1703 	push	ar1
      0007B2 74rCE            [12] 1704 	mov	a,#___str_72
      0007B4 C0 E0            [24] 1705 	push	acc
      0007B6 74s07            [12] 1706 	mov	a,#(___str_72 >> 8)
      0007B8 C0 E0            [24] 1707 	push	acc
      0007BA 12r00r00         [24] 1708 	lcall	_printf_tiny
      0007BD E5 81            [12] 1709 	mov	a,sp
      0007BF 24 FC            [12] 1710 	add	a,#0xfc
      0007C1 F5 81            [12] 1711 	mov	sp,a
      0007C3 D0 02            [24] 1712 	pop	ar2
      0007C5 D0 03            [24] 1713 	pop	ar3
      0007C7 D0 04            [24] 1714 	pop	ar4
      0007C9                       1715 00115$:
                                   1716 ;	8052Explorer.c:322: puntatore++;
      0007C9 0C               [12] 1717 	inc	r4
      0007CA BC 00 01         [24] 1718 	cjne	r4,#0x00,00200$
      0007CD 0B               [12] 1719 	inc	r3
      0007CE                       1720 00200$:
                                   1721 ;	8052Explorer.c:316: for (unsigned char posto = 0; posto < 16; posto++ ) {
      0007CE 05*09            [12] 1722 	inc	_dumpRAM_posto_262144_79
      0007D0 80 A6            [24] 1723 	sjmp	00123$
      0007D2                       1724 00142$:
      0007D2 8C 05            [24] 1725 	mov	ar5,r4
      0007D4 8B 06            [24] 1726 	mov	ar6,r3
      0007D6 8A 07            [24] 1727 	mov	ar7,r2
                                   1728 ;	8052Explorer.c:324: putchar('|');
      0007D8 90 00 7C         [24] 1729 	mov	dptr,#0x007c
      0007DB C0 07            [24] 1730 	push	ar7
      0007DD C0 06            [24] 1731 	push	ar6
      0007DF C0 05            [24] 1732 	push	ar5
      0007E1 12r00r00         [24] 1733 	lcall	_putchar
                                   1734 ;	8052Explorer.c:325: putchar('\r');
      0007E4 90 00 0D         [24] 1735 	mov	dptr,#0x000d
      0007E7 12r00r00         [24] 1736 	lcall	_putchar
      0007EA D0 05            [24] 1737 	pop	ar5
      0007EC D0 06            [24] 1738 	pop	ar6
      0007EE D0 07            [24] 1739 	pop	ar7
                                   1740 ;	8052Explorer.c:297: for (unsigned int indirizzo = 0; indirizzo <= 0xFF; indirizzo += 16 ) {
      0007F0 74 10            [12] 1741 	mov	a,#0x10
      0007F2 25*05            [12] 1742 	add	a,_dumpRAM_indirizzo_131072_70
      0007F4 F5*05            [12] 1743 	mov	_dumpRAM_indirizzo_131072_70,a
      0007F6 E4               [12] 1744 	clr	a
      0007F7 35*06            [12] 1745 	addc	a,(_dumpRAM_indirizzo_131072_70 + 1)
      0007F9 F5*06            [12] 1746 	mov	(_dumpRAM_indirizzo_131072_70 + 1),a
      0007FB 02r06r31         [24] 1747 	ljmp	00126$
      0007FE                       1748 00118$:
                                   1749 ;	8052Explorer.c:327: putchar('\r');
      0007FE 90 00 0D         [24] 1750 	mov	dptr,#0x000d
                                   1751 ;	8052Explorer.c:329: }
      000801 02r00r00         [24] 1752 	ljmp	_putchar
                                   1753 ;------------------------------------------------------------
                                   1754 ;Allocation info for local variables in function 'hexCODE'
                                   1755 ;------------------------------------------------------------
                                   1756 ;puntatore                 Allocated with name '_hexCODE_puntatore_65536_83'
                                   1757 ;checksum                  Allocated with name '_hexCODE_checksum_65537_84'
                                   1758 ;indirizzo                 Allocated to registers r3 r4 
                                   1759 ;posto                     Allocated to registers r0 
                                   1760 ;------------------------------------------------------------
                                   1761 ;	8052Explorer.c:331: void hexCODE(){
                                   1762 ;	-----------------------------------------
                                   1763 ;	 function hexCODE
                                   1764 ;	-----------------------------------------
      000804                       1765 _hexCODE:
                                   1766 ;	8052Explorer.c:332: unsigned char *puntatore = codice;
      000804 75*0A 00         [24] 1767 	mov	_hexCODE_puntatore_65536_83,#_codice
      000807 75*0B 00         [24] 1768 	mov	(_hexCODE_puntatore_65536_83 + 1),#(_codice >> 8)
      00080A 75*0C 80         [24] 1769 	mov	(_hexCODE_puntatore_65536_83 + 2),#0x80
                                   1770 ;	8052Explorer.c:336: puts("Dumping code in hex file format:");
      00080D 90r08r45         [24] 1771 	mov	dptr,#___str_85
      000810 75 F0 80         [24] 1772 	mov	b,#0x80
      000813 12r00r00         [24] 1773 	lcall	_puts
                                   1774 ;	8052Explorer.c:339: for (unsigned int indirizzo = 0; indirizzo <= CODESIZE; indirizzo += 16 ) {
      000816 7B 00            [12] 1775 	mov	r3,#0x00
      000818 7C 00            [12] 1776 	mov	r4,#0x00
      00081A                       1777 00120$:
      00081A C3               [12] 1778 	clr	c
      00081B 74 FF            [12] 1779 	mov	a,#0xff
      00081D 9B               [12] 1780 	subb	a,r3
      00081E 74 1F            [12] 1781 	mov	a,#0x1f
      000820 9C               [12] 1782 	subb	a,r4
      000821 50 03            [24] 1783 	jnc	00171$
      000823 02r0Ar13         [24] 1784 	ljmp	00115$
      000826                       1785 00171$:
                                   1786 ;	8052Explorer.c:340: printf_tiny(":10");
      000826 C0 04            [24] 1787 	push	ar4
      000828 C0 03            [24] 1788 	push	ar3
      00082A 74rF7            [12] 1789 	mov	a,#___str_74
      00082C C0 E0            [24] 1790 	push	acc
      00082E 74s07            [12] 1791 	mov	a,#(___str_74 >> 8)
      000830 C0 E0            [24] 1792 	push	acc
      000832 12r00r00         [24] 1793 	lcall	_printf_tiny
      000835 15 81            [12] 1794 	dec	sp
      000837 15 81            [12] 1795 	dec	sp
      000839 D0 03            [24] 1796 	pop	ar3
      00083B D0 04            [24] 1797 	pop	ar4
                                   1798 ;	8052Explorer.c:341: checksum = 0x10;
      00083D 79 10            [12] 1799 	mov	r1,#0x10
      00083F 7A 00            [12] 1800 	mov	r2,#0x00
                                   1801 ;	8052Explorer.c:342: if (indirizzo < 0x10) {
      000841 C3               [12] 1802 	clr	c
      000842 EB               [12] 1803 	mov	a,r3
      000843 94 10            [12] 1804 	subb	a,#0x10
      000845 EC               [12] 1805 	mov	a,r4
      000846 94 00            [12] 1806 	subb	a,#0x00
      000848 50 28            [24] 1807 	jnc	00108$
                                   1808 ;	8052Explorer.c:343: printf_tiny("000%x", indirizzo);
      00084A C0 04            [24] 1809 	push	ar4
      00084C C0 03            [24] 1810 	push	ar3
      00084E C0 02            [24] 1811 	push	ar2
      000850 C0 01            [24] 1812 	push	ar1
      000852 C0 03            [24] 1813 	push	ar3
      000854 C0 04            [24] 1814 	push	ar4
      000856 74rFB            [12] 1815 	mov	a,#___str_75
      000858 C0 E0            [24] 1816 	push	acc
      00085A 74s07            [12] 1817 	mov	a,#(___str_75 >> 8)
      00085C C0 E0            [24] 1818 	push	acc
      00085E 12r00r00         [24] 1819 	lcall	_printf_tiny
      000861 E5 81            [12] 1820 	mov	a,sp
      000863 24 FC            [12] 1821 	add	a,#0xfc
      000865 F5 81            [12] 1822 	mov	sp,a
      000867 D0 01            [24] 1823 	pop	ar1
      000869 D0 02            [24] 1824 	pop	ar2
      00086B D0 03            [24] 1825 	pop	ar3
      00086D D0 04            [24] 1826 	pop	ar4
      00086F 02r08rEF         [24] 1827 	ljmp	00109$
      000872                       1828 00108$:
                                   1829 ;	8052Explorer.c:344: } else if (indirizzo < 0x100) {
      000872 74 FF            [12] 1830 	mov	a,#0x100 - 0x01
      000874 2C               [12] 1831 	add	a,r4
      000875 40 27            [24] 1832 	jc	00105$
                                   1833 ;	8052Explorer.c:345: printf_tiny("00%x", indirizzo);
      000877 C0 04            [24] 1834 	push	ar4
      000879 C0 03            [24] 1835 	push	ar3
      00087B C0 02            [24] 1836 	push	ar2
      00087D C0 01            [24] 1837 	push	ar1
      00087F C0 03            [24] 1838 	push	ar3
      000881 C0 04            [24] 1839 	push	ar4
      000883 74r01            [12] 1840 	mov	a,#___str_76
      000885 C0 E0            [24] 1841 	push	acc
      000887 74s08            [12] 1842 	mov	a,#(___str_76 >> 8)
      000889 C0 E0            [24] 1843 	push	acc
      00088B 12r00r00         [24] 1844 	lcall	_printf_tiny
      00088E E5 81            [12] 1845 	mov	a,sp
      000890 24 FC            [12] 1846 	add	a,#0xfc
      000892 F5 81            [12] 1847 	mov	sp,a
      000894 D0 01            [24] 1848 	pop	ar1
      000896 D0 02            [24] 1849 	pop	ar2
      000898 D0 03            [24] 1850 	pop	ar3
      00089A D0 04            [24] 1851 	pop	ar4
      00089C 80 51            [24] 1852 	sjmp	00109$
      00089E                       1853 00105$:
                                   1854 ;	8052Explorer.c:346: } else if (indirizzo < 0x1000) {
      00089E 74 F0            [12] 1855 	mov	a,#0x100 - 0x10
      0008A0 2C               [12] 1856 	add	a,r4
      0008A1 40 27            [24] 1857 	jc	00102$
                                   1858 ;	8052Explorer.c:347: printf_tiny("0%x", indirizzo);
      0008A3 C0 04            [24] 1859 	push	ar4
      0008A5 C0 03            [24] 1860 	push	ar3
      0008A7 C0 02            [24] 1861 	push	ar2
      0008A9 C0 01            [24] 1862 	push	ar1
      0008AB C0 03            [24] 1863 	push	ar3
      0008AD C0 04            [24] 1864 	push	ar4
      0008AF 74r06            [12] 1865 	mov	a,#___str_77
      0008B1 C0 E0            [24] 1866 	push	acc
      0008B3 74s08            [12] 1867 	mov	a,#(___str_77 >> 8)
      0008B5 C0 E0            [24] 1868 	push	acc
      0008B7 12r00r00         [24] 1869 	lcall	_printf_tiny
      0008BA E5 81            [12] 1870 	mov	a,sp
      0008BC 24 FC            [12] 1871 	add	a,#0xfc
      0008BE F5 81            [12] 1872 	mov	sp,a
      0008C0 D0 01            [24] 1873 	pop	ar1
      0008C2 D0 02            [24] 1874 	pop	ar2
      0008C4 D0 03            [24] 1875 	pop	ar3
      0008C6 D0 04            [24] 1876 	pop	ar4
      0008C8 80 25            [24] 1877 	sjmp	00109$
      0008CA                       1878 00102$:
                                   1879 ;	8052Explorer.c:349: printf_tiny("%x", indirizzo);
      0008CA C0 04            [24] 1880 	push	ar4
      0008CC C0 03            [24] 1881 	push	ar3
      0008CE C0 02            [24] 1882 	push	ar2
      0008D0 C0 01            [24] 1883 	push	ar1
      0008D2 C0 03            [24] 1884 	push	ar3
      0008D4 C0 04            [24] 1885 	push	ar4
      0008D6 74r0A            [12] 1886 	mov	a,#___str_78
      0008D8 C0 E0            [24] 1887 	push	acc
      0008DA 74s08            [12] 1888 	mov	a,#(___str_78 >> 8)
      0008DC C0 E0            [24] 1889 	push	acc
      0008DE 12r00r00         [24] 1890 	lcall	_printf_tiny
      0008E1 E5 81            [12] 1891 	mov	a,sp
      0008E3 24 FC            [12] 1892 	add	a,#0xfc
      0008E5 F5 81            [12] 1893 	mov	sp,a
      0008E7 D0 01            [24] 1894 	pop	ar1
      0008E9 D0 02            [24] 1895 	pop	ar2
      0008EB D0 03            [24] 1896 	pop	ar3
      0008ED D0 04            [24] 1897 	pop	ar4
      0008EF                       1898 00109$:
                                   1899 ;	8052Explorer.c:351: checksum += (indirizzo >> 8 ) & 0xFF ;
      0008EF 8C 00            [24] 1900 	mov	ar0,r4
      0008F1 88 07            [24] 1901 	mov	ar7,r0
      0008F3 78 00            [12] 1902 	mov	r0,#0x00
      0008F5 EF               [12] 1903 	mov	a,r7
      0008F6 29               [12] 1904 	add	a,r1
      0008F7 FF               [12] 1905 	mov	r7,a
      0008F8 E8               [12] 1906 	mov	a,r0
      0008F9 3A               [12] 1907 	addc	a,r2
      0008FA F8               [12] 1908 	mov	r0,a
                                   1909 ;	8052Explorer.c:352: checksum += (indirizzo & 0xFF);
      0008FB 8B 05            [24] 1910 	mov	ar5,r3
      0008FD 7E 00            [12] 1911 	mov	r6,#0x00
      0008FF ED               [12] 1912 	mov	a,r5
      000900 2F               [12] 1913 	add	a,r7
      000901 F5*0D            [12] 1914 	mov	_hexCODE_checksum_65537_84,a
      000903 EE               [12] 1915 	mov	a,r6
      000904 38               [12] 1916 	addc	a,r0
      000905 F5*0E            [12] 1917 	mov	(_hexCODE_checksum_65537_84 + 1),a
                                   1918 ;	8052Explorer.c:353: printf_tiny("00");
      000907 C0 04            [24] 1919 	push	ar4
      000909 C0 03            [24] 1920 	push	ar3
      00090B 74r0D            [12] 1921 	mov	a,#___str_79
      00090D C0 E0            [24] 1922 	push	acc
      00090F 74s08            [12] 1923 	mov	a,#(___str_79 >> 8)
      000911 C0 E0            [24] 1924 	push	acc
      000913 12r00r00         [24] 1925 	lcall	_printf_tiny
      000916 15 81            [12] 1926 	dec	sp
      000918 15 81            [12] 1927 	dec	sp
      00091A D0 03            [24] 1928 	pop	ar3
      00091C D0 04            [24] 1929 	pop	ar4
                                   1930 ;	8052Explorer.c:355: for (unsigned char posto = 0; posto < 16; posto++ ) {
      00091E AD*0A            [24] 1931 	mov	r5,_hexCODE_puntatore_65536_83
      000920 AA*0B            [24] 1932 	mov	r2,(_hexCODE_puntatore_65536_83 + 1)
      000922 A9*0C            [24] 1933 	mov	r1,(_hexCODE_puntatore_65536_83 + 2)
      000924 78 00            [12] 1934 	mov	r0,#0x00
      000926                       1935 00117$:
      000926 B8 10 00         [24] 1936 	cjne	r0,#0x10,00175$
      000929                       1937 00175$:
      000929 40 03            [24] 1938 	jc	00176$
      00092B 02r09rB3         [24] 1939 	ljmp	00133$
      00092E                       1940 00176$:
                                   1941 ;	8052Explorer.c:356: if ( *puntatore < 16 ) {
      00092E 8D 82            [24] 1942 	mov	dpl,r5
      000930 8A 83            [24] 1943 	mov	dph,r2
      000932 89 F0            [24] 1944 	mov	b,r1
      000934 12r00r00         [24] 1945 	lcall	__gptrget
      000937 FF               [12] 1946 	mov	r7,a
      000938 BF 10 00         [24] 1947 	cjne	r7,#0x10,00177$
      00093B                       1948 00177$:
      00093B 50 1E            [24] 1949 	jnc	00111$
                                   1950 ;	8052Explorer.c:357: putchar('0');
      00093D 90 00 30         [24] 1951 	mov	dptr,#0x0030
      000940 C0 05            [24] 1952 	push	ar5
      000942 C0 04            [24] 1953 	push	ar4
      000944 C0 03            [24] 1954 	push	ar3
      000946 C0 02            [24] 1955 	push	ar2
      000948 C0 01            [24] 1956 	push	ar1
      00094A C0 00            [24] 1957 	push	ar0
      00094C 12r00r00         [24] 1958 	lcall	_putchar
      00094F D0 00            [24] 1959 	pop	ar0
      000951 D0 01            [24] 1960 	pop	ar1
      000953 D0 02            [24] 1961 	pop	ar2
      000955 D0 03            [24] 1962 	pop	ar3
      000957 D0 04            [24] 1963 	pop	ar4
      000959 D0 05            [24] 1964 	pop	ar5
      00095B                       1965 00111$:
                                   1966 ;	8052Explorer.c:359: printf_tiny("%x", *puntatore);
      00095B 8D 82            [24] 1967 	mov	dpl,r5
      00095D 8A 83            [24] 1968 	mov	dph,r2
      00095F 89 F0            [24] 1969 	mov	b,r1
      000961 12r00r00         [24] 1970 	lcall	__gptrget
      000964 FF               [12] 1971 	mov	r7,a
      000965 7E 00            [12] 1972 	mov	r6,#0x00
      000967 C0 05            [24] 1973 	push	ar5
      000969 C0 04            [24] 1974 	push	ar4
      00096B C0 03            [24] 1975 	push	ar3
      00096D C0 02            [24] 1976 	push	ar2
      00096F C0 01            [24] 1977 	push	ar1
      000971 C0 00            [24] 1978 	push	ar0
      000973 C0 07            [24] 1979 	push	ar7
      000975 C0 06            [24] 1980 	push	ar6
      000977 74r0A            [12] 1981 	mov	a,#___str_78
      000979 C0 E0            [24] 1982 	push	acc
      00097B 74s08            [12] 1983 	mov	a,#(___str_78 >> 8)
      00097D C0 E0            [24] 1984 	push	acc
      00097F 12r00r00         [24] 1985 	lcall	_printf_tiny
      000982 E5 81            [12] 1986 	mov	a,sp
      000984 24 FC            [12] 1987 	add	a,#0xfc
      000986 F5 81            [12] 1988 	mov	sp,a
      000988 D0 00            [24] 1989 	pop	ar0
      00098A D0 01            [24] 1990 	pop	ar1
      00098C D0 02            [24] 1991 	pop	ar2
      00098E D0 03            [24] 1992 	pop	ar3
      000990 D0 04            [24] 1993 	pop	ar4
      000992 D0 05            [24] 1994 	pop	ar5
                                   1995 ;	8052Explorer.c:360: checksum += *puntatore;
      000994 8D 82            [24] 1996 	mov	dpl,r5
      000996 8A 83            [24] 1997 	mov	dph,r2
      000998 89 F0            [24] 1998 	mov	b,r1
      00099A 12r00r00         [24] 1999 	lcall	__gptrget
      00099D FF               [12] 2000 	mov	r7,a
      00099E A3               [24] 2001 	inc	dptr
      00099F AD 82            [24] 2002 	mov	r5,dpl
      0009A1 AA 83            [24] 2003 	mov	r2,dph
      0009A3 7E 00            [12] 2004 	mov	r6,#0x00
      0009A5 EF               [12] 2005 	mov	a,r7
      0009A6 25*0D            [12] 2006 	add	a,_hexCODE_checksum_65537_84
      0009A8 F5*0D            [12] 2007 	mov	_hexCODE_checksum_65537_84,a
      0009AA EE               [12] 2008 	mov	a,r6
      0009AB 35*0E            [12] 2009 	addc	a,(_hexCODE_checksum_65537_84 + 1)
      0009AD F5*0E            [12] 2010 	mov	(_hexCODE_checksum_65537_84 + 1),a
                                   2011 ;	8052Explorer.c:361: puntatore++;
                                   2012 ;	8052Explorer.c:355: for (unsigned char posto = 0; posto < 16; posto++ ) {
      0009AF 08               [12] 2013 	inc	r0
      0009B0 02r09r26         [24] 2014 	ljmp	00117$
      0009B3                       2015 00133$:
      0009B3 8D*0A            [24] 2016 	mov	_hexCODE_puntatore_65536_83,r5
      0009B5 8A*0B            [24] 2017 	mov	(_hexCODE_puntatore_65536_83 + 1),r2
      0009B7 89*0C            [24] 2018 	mov	(_hexCODE_puntatore_65536_83 + 2),r1
                                   2019 ;	8052Explorer.c:363: checksum = ((~checksum) & 0xFF);
      0009B9 E5*0D            [12] 2020 	mov	a,_hexCODE_checksum_65537_84
      0009BB F4               [12] 2021 	cpl	a
      0009BC FE               [12] 2022 	mov	r6,a
      0009BD E5*0E            [12] 2023 	mov	a,(_hexCODE_checksum_65537_84 + 1)
      0009BF F4               [12] 2024 	cpl	a
      0009C0 7F 00            [12] 2025 	mov	r7,#0x00
                                   2026 ;	8052Explorer.c:364: checksum++;
      0009C2 0E               [12] 2027 	inc	r6
      0009C3 BE 00 01         [24] 2028 	cjne	r6,#0x00,00179$
      0009C6 0F               [12] 2029 	inc	r7
      0009C7                       2030 00179$:
                                   2031 ;	8052Explorer.c:365: if ( (checksum & 0xFF) < 16 ) {
      0009C7 8E 02            [24] 2032 	mov	ar2,r6
      0009C9 7D 00            [12] 2033 	mov	r5,#0x00
      0009CB C3               [12] 2034 	clr	c
      0009CC EA               [12] 2035 	mov	a,r2
      0009CD 94 10            [12] 2036 	subb	a,#0x10
      0009CF ED               [12] 2037 	mov	a,r5
      0009D0 94 00            [12] 2038 	subb	a,#0x00
      0009D2 50 16            [24] 2039 	jnc	00114$
                                   2040 ;	8052Explorer.c:366: putchar('0');
      0009D4 90 00 30         [24] 2041 	mov	dptr,#0x0030
      0009D7 C0 07            [24] 2042 	push	ar7
      0009D9 C0 06            [24] 2043 	push	ar6
      0009DB C0 04            [24] 2044 	push	ar4
      0009DD C0 03            [24] 2045 	push	ar3
      0009DF 12r00r00         [24] 2046 	lcall	_putchar
      0009E2 D0 03            [24] 2047 	pop	ar3
      0009E4 D0 04            [24] 2048 	pop	ar4
      0009E6 D0 06            [24] 2049 	pop	ar6
      0009E8 D0 07            [24] 2050 	pop	ar7
      0009EA                       2051 00114$:
                                   2052 ;	8052Explorer.c:368: printf_tiny("%x\r", checksum & 0xFF);
      0009EA 7F 00            [12] 2053 	mov	r7,#0x00
      0009EC C0 04            [24] 2054 	push	ar4
      0009EE C0 03            [24] 2055 	push	ar3
      0009F0 C0 06            [24] 2056 	push	ar6
      0009F2 C0 07            [24] 2057 	push	ar7
      0009F4 74r10            [12] 2058 	mov	a,#___str_80
      0009F6 C0 E0            [24] 2059 	push	acc
      0009F8 74s08            [12] 2060 	mov	a,#(___str_80 >> 8)
      0009FA C0 E0            [24] 2061 	push	acc
      0009FC 12r00r00         [24] 2062 	lcall	_printf_tiny
      0009FF E5 81            [12] 2063 	mov	a,sp
      000A01 24 FC            [12] 2064 	add	a,#0xfc
      000A03 F5 81            [12] 2065 	mov	sp,a
      000A05 D0 03            [24] 2066 	pop	ar3
      000A07 D0 04            [24] 2067 	pop	ar4
                                   2068 ;	8052Explorer.c:339: for (unsigned int indirizzo = 0; indirizzo <= CODESIZE; indirizzo += 16 ) {
      000A09 74 10            [12] 2069 	mov	a,#0x10
      000A0B 2B               [12] 2070 	add	a,r3
      000A0C FB               [12] 2071 	mov	r3,a
      000A0D E4               [12] 2072 	clr	a
      000A0E 3C               [12] 2073 	addc	a,r4
      000A0F FC               [12] 2074 	mov	r4,a
      000A10 02r08r1A         [24] 2075 	ljmp	00120$
      000A13                       2076 00115$:
                                   2077 ;	8052Explorer.c:370: printf_tiny("%s", ":00000001FF");
      000A13 74r17            [12] 2078 	mov	a,#___str_82
      000A15 C0 E0            [24] 2079 	push	acc
      000A17 74s08            [12] 2080 	mov	a,#(___str_82 >> 8)
      000A19 C0 E0            [24] 2081 	push	acc
      000A1B 74 80            [12] 2082 	mov	a,#0x80
      000A1D C0 E0            [24] 2083 	push	acc
      000A1F 74r14            [12] 2084 	mov	a,#___str_81
      000A21 C0 E0            [24] 2085 	push	acc
      000A23 74s08            [12] 2086 	mov	a,#(___str_81 >> 8)
      000A25 C0 E0            [24] 2087 	push	acc
      000A27 12r00r00         [24] 2088 	lcall	_printf_tiny
      000A2A E5 81            [12] 2089 	mov	a,sp
      000A2C 24 FB            [12] 2090 	add	a,#0xfb
      000A2E F5 81            [12] 2091 	mov	sp,a
                                   2092 ;	8052Explorer.c:372: putchar('\r');
      000A30 90 00 0D         [24] 2093 	mov	dptr,#0x000d
      000A33 12r00r00         [24] 2094 	lcall	_putchar
                                   2095 ;	8052Explorer.c:373: putchar('\r');
      000A36 90 00 0D         [24] 2096 	mov	dptr,#0x000d
                                   2097 ;	8052Explorer.c:374: }
      000A39 02r00r00         [24] 2098 	ljmp	_putchar
                                   2099 ;------------------------------------------------------------
                                   2100 ;Allocation info for local variables in function 'reset'
                                   2101 ;------------------------------------------------------------
                                   2102 ;	8052Explorer.c:376: void reset( void ) {
                                   2103 ;	-----------------------------------------
                                   2104 ;	 function reset
                                   2105 ;	-----------------------------------------
      000A3C                       2106 _reset:
                                   2107 ;	8052Explorer.c:377: puts("Resetting the micro.");
      000A3C 90r08r66         [24] 2108 	mov	dptr,#___str_86
      000A3F 75 F0 80         [24] 2109 	mov	b,#0x80
      000A42 12r00r00         [24] 2110 	lcall	_puts
                                   2111 ;	8052Explorer.c:383: while ( 1 );
      000A45                       2112 00102$:
                                   2113 ;	8052Explorer.c:384: }
      000A45 80 FE            [24] 2114 	sjmp	00102$
                                   2115 ;------------------------------------------------------------
                                   2116 ;Allocation info for local variables in function 'start'
                                   2117 ;------------------------------------------------------------
                                   2118 ;	8052Explorer.c:386: void start( void )
                                   2119 ;	-----------------------------------------
                                   2120 ;	 function start
                                   2121 ;	-----------------------------------------
      000A47                       2122 _start:
                                   2123 ;	8052Explorer.c:402: P0=0xFF;
      000A47 75 80 FF         [24] 2124 	mov	_P0,#0xff
                                   2125 ;	8052Explorer.c:403: P1=0xFF;
      000A4A 75 90 FF         [24] 2126 	mov	_P1,#0xff
                                   2127 ;	8052Explorer.c:404: P2=0xFF;
      000A4D 75 A0 FF         [24] 2128 	mov	_P2,#0xff
                                   2129 ;	8052Explorer.c:405: P3=0xFF;
      000A50 75 B0 FF         [24] 2130 	mov	_P3,#0xff
                                   2131 ;	8052Explorer.c:406: init_ser(MYTH2, MYTL2);
      000A53 75*00 FD         [24] 2132 	mov	_init_ser_PARM_2,#0xfd
      000A56 75 82 FF         [24] 2133 	mov	dpl,#0xff
      000A59 12r00r00         [24] 2134 	lcall	_init_ser
                                   2135 ;	8052Explorer.c:407: felix();
      000A5C 12r00r00         [24] 2136 	lcall	_felix
                                   2137 ;	8052Explorer.c:408: printf_tiny("Cpu %s running at %sMHz\r", CPU,  MHZ);
      000A5F 74r9C            [12] 2138 	mov	a,#___str_89
      000A61 C0 E0            [24] 2139 	push	acc
      000A63 74s08            [12] 2140 	mov	a,#(___str_89 >> 8)
      000A65 C0 E0            [24] 2141 	push	acc
      000A67 74 80            [12] 2142 	mov	a,#0x80
      000A69 C0 E0            [24] 2143 	push	acc
      000A6B 74r94            [12] 2144 	mov	a,#___str_88
      000A6D C0 E0            [24] 2145 	push	acc
      000A6F 74s08            [12] 2146 	mov	a,#(___str_88 >> 8)
      000A71 C0 E0            [24] 2147 	push	acc
      000A73 74 80            [12] 2148 	mov	a,#0x80
      000A75 C0 E0            [24] 2149 	push	acc
      000A77 74r7B            [12] 2150 	mov	a,#___str_87
      000A79 C0 E0            [24] 2151 	push	acc
      000A7B 74s08            [12] 2152 	mov	a,#(___str_87 >> 8)
      000A7D C0 E0            [24] 2153 	push	acc
      000A7F 12r00r00         [24] 2154 	lcall	_printf_tiny
      000A82 E5 81            [12] 2155 	mov	a,sp
      000A84 24 F8            [12] 2156 	add	a,#0xf8
      000A86 F5 81            [12] 2157 	mov	sp,a
                                   2158 ;	8052Explorer.c:425: printf_tiny("Started timer 2 with th = %x and tl = %x\r",MYTH2, MYTL2);
      000A88 74 FD            [12] 2159 	mov	a,#0xfd
      000A8A C0 E0            [24] 2160 	push	acc
      000A8C E4               [12] 2161 	clr	a
      000A8D C0 E0            [24] 2162 	push	acc
      000A8F 14               [12] 2163 	dec	a
      000A90 C0 E0            [24] 2164 	push	acc
      000A92 E4               [12] 2165 	clr	a
      000A93 C0 E0            [24] 2166 	push	acc
      000A95 74rA4            [12] 2167 	mov	a,#___str_90
      000A97 C0 E0            [24] 2168 	push	acc
      000A99 74s08            [12] 2169 	mov	a,#(___str_90 >> 8)
      000A9B C0 E0            [24] 2170 	push	acc
      000A9D 12r00r00         [24] 2171 	lcall	_printf_tiny
      000AA0 E5 81            [12] 2172 	mov	a,sp
      000AA2 24 FA            [12] 2173 	add	a,#0xfa
      000AA4 F5 81            [12] 2174 	mov	sp,a
                                   2175 ;	8052Explorer.c:426: printf_tiny("Started serial at %s bps\r", BPS);
      000AA6 74rE8            [12] 2176 	mov	a,#___str_92
      000AA8 C0 E0            [24] 2177 	push	acc
      000AAA 74s08            [12] 2178 	mov	a,#(___str_92 >> 8)
      000AAC C0 E0            [24] 2179 	push	acc
      000AAE 74 80            [12] 2180 	mov	a,#0x80
      000AB0 C0 E0            [24] 2181 	push	acc
      000AB2 74rCE            [12] 2182 	mov	a,#___str_91
      000AB4 C0 E0            [24] 2183 	push	acc
      000AB6 74s08            [12] 2184 	mov	a,#(___str_91 >> 8)
      000AB8 C0 E0            [24] 2185 	push	acc
      000ABA 12r00r00         [24] 2186 	lcall	_printf_tiny
      000ABD E5 81            [12] 2187 	mov	a,sp
      000ABF 24 FB            [12] 2188 	add	a,#0xfb
      000AC1 F5 81            [12] 2189 	mov	sp,a
                                   2190 ;	8052Explorer.c:427: init_timer0(0xDE, 0xED);
      000AC3 75*00 ED         [24] 2191 	mov	_init_timer0_PARM_2,#0xed
      000AC6 75 82 DE         [24] 2192 	mov	dpl,#0xde
      000AC9 12r00r00         [24] 2193 	lcall	_init_timer0
                                   2194 ;	8052Explorer.c:428: printf_tiny("Started timer 0 with th = %x and tl = %x\r", 0xDE, 0xED);
      000ACC 74 ED            [12] 2195 	mov	a,#0xed
      000ACE C0 E0            [24] 2196 	push	acc
      000AD0 E4               [12] 2197 	clr	a
      000AD1 C0 E0            [24] 2198 	push	acc
      000AD3 74 DE            [12] 2199 	mov	a,#0xde
      000AD5 C0 E0            [24] 2200 	push	acc
      000AD7 E4               [12] 2201 	clr	a
      000AD8 C0 E0            [24] 2202 	push	acc
      000ADA 74rEF            [12] 2203 	mov	a,#___str_93
      000ADC C0 E0            [24] 2204 	push	acc
      000ADE 74s08            [12] 2205 	mov	a,#(___str_93 >> 8)
      000AE0 C0 E0            [24] 2206 	push	acc
      000AE2 12r00r00         [24] 2207 	lcall	_printf_tiny
      000AE5 E5 81            [12] 2208 	mov	a,sp
      000AE7 24 FA            [12] 2209 	add	a,#0xfa
      000AE9 F5 81            [12] 2210 	mov	sp,a
                                   2211 ;	8052Explorer.c:430: puts("Print a string from code memory:");
      000AEB 90r09r19         [24] 2212 	mov	dptr,#___str_96
      000AEE 75 F0 80         [24] 2213 	mov	b,#0x80
      000AF1 12r00r00         [24] 2214 	lcall	_puts
                                   2215 ;	8052Explorer.c:431: puts(acTestString); 
      000AF4 90r00r00         [24] 2216 	mov	dptr,#_acTestString
      000AF7 75 F0 80         [24] 2217 	mov	b,#0x80
                                   2218 ;	8052Explorer.c:432: }
      000AFA 02r00r00         [24] 2219 	ljmp	_puts
                                   2220 ;------------------------------------------------------------
                                   2221 ;Allocation info for local variables in function 'p'
                                   2222 ;------------------------------------------------------------
                                   2223 ;porta                     Allocated to registers r7 
                                   2224 ;pin                       Allocated with name '_p_pin_65537_105'
                                   2225 ;action                    Allocated to registers r5 
                                   2226 ;------------------------------------------------------------
                                   2227 ;	8052Explorer.c:434: void p( unsigned char porta ) {
                                   2228 ;	-----------------------------------------
                                   2229 ;	 function p
                                   2230 ;	-----------------------------------------
      000AFD                       2231 _p:
      000AFD AF 82            [24] 2232 	mov	r7,dpl
                                   2233 ;	8052Explorer.c:435: if (porta == 3 ) {
      000AFF E4               [12] 2234 	clr	a
      000B00 BF 03 01         [24] 2235 	cjne	r7,#0x03,00255$
      000B03 04               [12] 2236 	inc	a
      000B04                       2237 00255$:
      000B04 FE               [12] 2238 	mov	r6,a
      000B05 60 23            [24] 2239 	jz	00105$
                                   2240 ;	8052Explorer.c:436: printf_tiny("Which pin from 2 to 7 of port %u?\r", porta);
      000B07 8F 04            [24] 2241 	mov	ar4,r7
      000B09 7D 00            [12] 2242 	mov	r5,#0x00
      000B0B C0 07            [24] 2243 	push	ar7
      000B0D C0 06            [24] 2244 	push	ar6
      000B0F C0 04            [24] 2245 	push	ar4
      000B11 C0 05            [24] 2246 	push	ar5
      000B13 74r60            [12] 2247 	mov	a,#___str_97
      000B15 C0 E0            [24] 2248 	push	acc
      000B17 74s09            [12] 2249 	mov	a,#(___str_97 >> 8)
      000B19 C0 E0            [24] 2250 	push	acc
      000B1B 12r00r00         [24] 2251 	lcall	_printf_tiny
      000B1E E5 81            [12] 2252 	mov	a,sp
      000B20 24 FC            [12] 2253 	add	a,#0xfc
      000B22 F5 81            [12] 2254 	mov	sp,a
      000B24 D0 06            [24] 2255 	pop	ar6
      000B26 D0 07            [24] 2256 	pop	ar7
      000B28 80 47            [24] 2257 	sjmp	00107$
      000B2A                       2258 00105$:
                                   2259 ;	8052Explorer.c:437: } else if (porta == 2 ) {
      000B2A BF 02 23         [24] 2260 	cjne	r7,#0x02,00102$
                                   2261 ;	8052Explorer.c:438: printf_tiny("Which pin from 3 to 7 of port %u?\r", porta);
      000B2D 8F 04            [24] 2262 	mov	ar4,r7
      000B2F 7D 00            [12] 2263 	mov	r5,#0x00
      000B31 C0 07            [24] 2264 	push	ar7
      000B33 C0 06            [24] 2265 	push	ar6
      000B35 C0 04            [24] 2266 	push	ar4
      000B37 C0 05            [24] 2267 	push	ar5
      000B39 74r83            [12] 2268 	mov	a,#___str_98
      000B3B C0 E0            [24] 2269 	push	acc
      000B3D 74s09            [12] 2270 	mov	a,#(___str_98 >> 8)
      000B3F C0 E0            [24] 2271 	push	acc
      000B41 12r00r00         [24] 2272 	lcall	_printf_tiny
      000B44 E5 81            [12] 2273 	mov	a,sp
      000B46 24 FC            [12] 2274 	add	a,#0xfc
      000B48 F5 81            [12] 2275 	mov	sp,a
      000B4A D0 06            [24] 2276 	pop	ar6
      000B4C D0 07            [24] 2277 	pop	ar7
      000B4E 80 21            [24] 2278 	sjmp	00107$
      000B50                       2279 00102$:
                                   2280 ;	8052Explorer.c:440: printf_tiny("Which pin from 0 to 7 of port %u?\r", porta);
      000B50 8F 04            [24] 2281 	mov	ar4,r7
      000B52 7D 00            [12] 2282 	mov	r5,#0x00
      000B54 C0 07            [24] 2283 	push	ar7
      000B56 C0 06            [24] 2284 	push	ar6
      000B58 C0 04            [24] 2285 	push	ar4
      000B5A C0 05            [24] 2286 	push	ar5
      000B5C 74rA6            [12] 2287 	mov	a,#___str_99
      000B5E C0 E0            [24] 2288 	push	acc
      000B60 74s09            [12] 2289 	mov	a,#(___str_99 >> 8)
      000B62 C0 E0            [24] 2290 	push	acc
      000B64 12r00r00         [24] 2291 	lcall	_printf_tiny
      000B67 E5 81            [12] 2292 	mov	a,sp
      000B69 24 FC            [12] 2293 	add	a,#0xfc
      000B6B F5 81            [12] 2294 	mov	sp,a
      000B6D D0 06            [24] 2295 	pop	ar6
      000B6F D0 07            [24] 2296 	pop	ar7
                                   2297 ;	8052Explorer.c:442: while (!ser_byte_avail()){
      000B71                       2298 00107$:
      000B71 C0 07            [24] 2299 	push	ar7
      000B73 C0 06            [24] 2300 	push	ar6
      000B75 12r00r00         [24] 2301 	lcall	_ser_byte_avail
      000B78 E5 82            [12] 2302 	mov	a,dpl
      000B7A D0 06            [24] 2303 	pop	ar6
      000B7C D0 07            [24] 2304 	pop	ar7
      000B7E 60 F1            [24] 2305 	jz	00107$
                                   2306 ;	8052Explorer.c:445: unsigned char pin = getchar();
      000B80 C0 07            [24] 2307 	push	ar7
      000B82 C0 06            [24] 2308 	push	ar6
      000B84 12r00r00         [24] 2309 	lcall	_getchar
      000B87 AC 82            [24] 2310 	mov	r4,dpl
      000B89 D0 06            [24] 2311 	pop	ar6
      000B8B D0 07            [24] 2312 	pop	ar7
                                   2313 ;	8052Explorer.c:446: pin = pin - 48;
      000B8D EC               [12] 2314 	mov	a,r4
      000B8E 24 D0            [12] 2315 	add	a,#0xd0
      000B90 F5*0F            [12] 2316 	mov	_p_pin_65537_105,a
                                   2317 ;	8052Explorer.c:447: printf_tiny("Pin %u of port %u: ", pin, porta );
      000B92 8F 03            [24] 2318 	mov	ar3,r7
      000B94 7C 00            [12] 2319 	mov	r4,#0x00
      000B96 A9*0F            [24] 2320 	mov	r1,_p_pin_65537_105
      000B98 7A 00            [12] 2321 	mov	r2,#0x00
      000B9A C0 07            [24] 2322 	push	ar7
      000B9C C0 06            [24] 2323 	push	ar6
      000B9E C0 04            [24] 2324 	push	ar4
      000BA0 C0 03            [24] 2325 	push	ar3
      000BA2 C0 02            [24] 2326 	push	ar2
      000BA4 C0 01            [24] 2327 	push	ar1
      000BA6 C0 03            [24] 2328 	push	ar3
      000BA8 C0 04            [24] 2329 	push	ar4
      000BAA C0 01            [24] 2330 	push	ar1
      000BAC C0 02            [24] 2331 	push	ar2
      000BAE 74rC9            [12] 2332 	mov	a,#___str_100
      000BB0 C0 E0            [24] 2333 	push	acc
      000BB2 74s09            [12] 2334 	mov	a,#(___str_100 >> 8)
      000BB4 C0 E0            [24] 2335 	push	acc
      000BB6 12r00r00         [24] 2336 	lcall	_printf_tiny
      000BB9 E5 81            [12] 2337 	mov	a,sp
      000BBB 24 FA            [12] 2338 	add	a,#0xfa
      000BBD F5 81            [12] 2339 	mov	sp,a
      000BBF D0 01            [24] 2340 	pop	ar1
      000BC1 D0 02            [24] 2341 	pop	ar2
      000BC3 D0 03            [24] 2342 	pop	ar3
      000BC5 D0 04            [24] 2343 	pop	ar4
      000BC7 D0 06            [24] 2344 	pop	ar6
      000BC9 D0 07            [24] 2345 	pop	ar7
                                   2346 ;	8052Explorer.c:448: if ( pin >= 0 && pin <= 8 ) {
      000BCB E5*0F            [12] 2347 	mov	a,_p_pin_65537_105
      000BCD 24 F7            [12] 2348 	add	a,#0xff - 0x08
      000BCF 50 03            [24] 2349 	jnc	00261$
      000BD1 02r0Dr28         [24] 2350 	ljmp	00150$
      000BD4                       2351 00261$:
                                   2352 ;	8052Explorer.c:449: if ( !(porta == 3 && ( pin == 0 || pin == 1))) {
      000BD4 EE               [12] 2353 	mov	a,r6
      000BD5 60 0F            [24] 2354 	jz	00144$
      000BD7 E5*0F            [12] 2355 	mov	a,_p_pin_65537_105
      000BD9 70 03            [24] 2356 	jnz	00263$
      000BDB 02r0Dr1F         [24] 2357 	ljmp	00145$
      000BDE                       2358 00263$:
      000BDE 74 01            [12] 2359 	mov	a,#0x01
      000BE0 B5*0F 03         [24] 2360 	cjne	a,_p_pin_65537_105,00264$
      000BE3 02r0Dr1F         [24] 2361 	ljmp	00145$
      000BE6                       2362 00264$:
      000BE6                       2363 00144$:
                                   2364 ;	8052Explorer.c:450: if ( !(porta == 2 && ( pin == 0 || pin == 1 || pin == 2))) {
      000BE6 E4               [12] 2365 	clr	a
      000BE7 BF 02 01         [24] 2366 	cjne	r7,#0x02,00265$
      000BEA 04               [12] 2367 	inc	a
      000BEB                       2368 00265$:
      000BEB FE               [12] 2369 	mov	r6,a
      000BEC 60 17            [24] 2370 	jz	00138$
      000BEE E5*0F            [12] 2371 	mov	a,_p_pin_65537_105
      000BF0 70 03            [24] 2372 	jnz	00268$
      000BF2 02r0Dr16         [24] 2373 	ljmp	00139$
      000BF5                       2374 00268$:
      000BF5 74 01            [12] 2375 	mov	a,#0x01
      000BF7 B5*0F 03         [24] 2376 	cjne	a,_p_pin_65537_105,00269$
      000BFA 02r0Dr16         [24] 2377 	ljmp	00139$
      000BFD                       2378 00269$:
      000BFD 74 02            [12] 2379 	mov	a,#0x02
      000BFF B5*0F 03         [24] 2380 	cjne	a,_p_pin_65537_105,00270$
      000C02 02r0Dr16         [24] 2381 	ljmp	00139$
      000C05                       2382 00270$:
      000C05                       2383 00138$:
                                   2384 ;	8052Explorer.c:451: puts("0 off, 1 on.");
      000C05 90r09rDD         [24] 2385 	mov	dptr,#___str_101
      000C08 75 F0 80         [24] 2386 	mov	b,#0x80
      000C0B C0 07            [24] 2387 	push	ar7
      000C0D C0 06            [24] 2388 	push	ar6
      000C0F C0 04            [24] 2389 	push	ar4
      000C11 C0 03            [24] 2390 	push	ar3
      000C13 C0 02            [24] 2391 	push	ar2
      000C15 C0 01            [24] 2392 	push	ar1
      000C17 12r00r00         [24] 2393 	lcall	_puts
      000C1A D0 01            [24] 2394 	pop	ar1
      000C1C D0 02            [24] 2395 	pop	ar2
      000C1E D0 03            [24] 2396 	pop	ar3
      000C20 D0 04            [24] 2397 	pop	ar4
      000C22 D0 06            [24] 2398 	pop	ar6
      000C24 D0 07            [24] 2399 	pop	ar7
                                   2400 ;	8052Explorer.c:452: while (!ser_byte_avail()){
      000C26                       2401 00110$:
      000C26 C0 07            [24] 2402 	push	ar7
      000C28 C0 06            [24] 2403 	push	ar6
      000C2A C0 04            [24] 2404 	push	ar4
      000C2C C0 03            [24] 2405 	push	ar3
      000C2E C0 02            [24] 2406 	push	ar2
      000C30 C0 01            [24] 2407 	push	ar1
      000C32 12r00r00         [24] 2408 	lcall	_ser_byte_avail
      000C35 E5 82            [12] 2409 	mov	a,dpl
      000C37 D0 01            [24] 2410 	pop	ar1
      000C39 D0 02            [24] 2411 	pop	ar2
      000C3B D0 03            [24] 2412 	pop	ar3
      000C3D D0 04            [24] 2413 	pop	ar4
      000C3F D0 06            [24] 2414 	pop	ar6
      000C41 D0 07            [24] 2415 	pop	ar7
      000C43 60 E1            [24] 2416 	jz	00110$
                                   2417 ;	8052Explorer.c:455: unsigned char action = getchar();
      000C45 C0 07            [24] 2418 	push	ar7
      000C47 C0 06            [24] 2419 	push	ar6
      000C49 C0 04            [24] 2420 	push	ar4
      000C4B C0 03            [24] 2421 	push	ar3
      000C4D C0 02            [24] 2422 	push	ar2
      000C4F C0 01            [24] 2423 	push	ar1
      000C51 12r00r00         [24] 2424 	lcall	_getchar
      000C54 A8 82            [24] 2425 	mov	r0,dpl
      000C56 D0 01            [24] 2426 	pop	ar1
      000C58 D0 02            [24] 2427 	pop	ar2
      000C5A D0 03            [24] 2428 	pop	ar3
      000C5C D0 04            [24] 2429 	pop	ar4
      000C5E D0 06            [24] 2430 	pop	ar6
      000C60 D0 07            [24] 2431 	pop	ar7
                                   2432 ;	8052Explorer.c:456: action = action -48;
      000C62 E8               [12] 2433 	mov	a,r0
      000C63 24 D0            [12] 2434 	add	a,#0xd0
                                   2435 ;	8052Explorer.c:457: if (action == 0 || action == 1) {
      000C65 FD               [12] 2436 	mov	r5,a
      000C66 60 08            [24] 2437 	jz	00134$
      000C68 BD 01 02         [24] 2438 	cjne	r5,#0x01,00273$
      000C6B 80 03            [24] 2439 	sjmp	00274$
      000C6D                       2440 00273$:
      000C6D 02r0Dr0D         [24] 2441 	ljmp	00135$
      000C70                       2442 00274$:
      000C70                       2443 00134$:
                                   2444 ;	8052Explorer.c:458: if (action == 1) {
      000C70 BD 01 4D         [24] 2445 	cjne	r5,#0x01,00132$
                                   2446 ;	8052Explorer.c:459: action = action << pin;
      000C73 85*0F F0         [24] 2447 	mov	b,_p_pin_65537_105
      000C76 05 F0            [12] 2448 	inc	b
      000C78 ED               [12] 2449 	mov	a,r5
      000C79 80 02            [24] 2450 	sjmp	00279$
      000C7B                       2451 00277$:
      000C7B 25 E0            [12] 2452 	add	a,acc
      000C7D                       2453 00279$:
      000C7D D5 F0 FB         [24] 2454 	djnz	b,00277$
                                   2455 ;	8052Explorer.c:460: action = ~action;
      000C80 F4               [12] 2456 	cpl	a
      000C81 FD               [12] 2457 	mov	r5,a
                                   2458 ;	8052Explorer.c:462: printf_tiny("Setting pin %u of port %u on.\r", pin, porta );
      000C82 C0 07            [24] 2459 	push	ar7
      000C84 C0 06            [24] 2460 	push	ar6
      000C86 C0 05            [24] 2461 	push	ar5
      000C88 C0 03            [24] 2462 	push	ar3
      000C8A C0 04            [24] 2463 	push	ar4
      000C8C C0 01            [24] 2464 	push	ar1
      000C8E C0 02            [24] 2465 	push	ar2
      000C90 74rEA            [12] 2466 	mov	a,#___str_102
      000C92 C0 E0            [24] 2467 	push	acc
      000C94 74s09            [12] 2468 	mov	a,#(___str_102 >> 8)
      000C96 C0 E0            [24] 2469 	push	acc
      000C98 12r00r00         [24] 2470 	lcall	_printf_tiny
      000C9B E5 81            [12] 2471 	mov	a,sp
      000C9D 24 FA            [12] 2472 	add	a,#0xfa
      000C9F F5 81            [12] 2473 	mov	sp,a
      000CA1 D0 05            [24] 2474 	pop	ar5
      000CA3 D0 06            [24] 2475 	pop	ar6
      000CA5 D0 07            [24] 2476 	pop	ar7
                                   2477 ;	8052Explorer.c:463: if (0 == porta) {
      000CA7 EF               [12] 2478 	mov	a,r7
      000CA8 70 04            [24] 2479 	jnz	00120$
                                   2480 ;	8052Explorer.c:464: P0 &= action;
      000CAA ED               [12] 2481 	mov	a,r5
      000CAB 52 80            [12] 2482 	anl	_P0,a
      000CAD 22               [24] 2483 	ret
      000CAE                       2484 00120$:
                                   2485 ;	8052Explorer.c:465: } else if (1 == porta) {
      000CAE BF 01 04         [24] 2486 	cjne	r7,#0x01,00117$
                                   2487 ;	8052Explorer.c:466: P1 &= action;
      000CB1 ED               [12] 2488 	mov	a,r5
      000CB2 52 90            [12] 2489 	anl	_P1,a
      000CB4 22               [24] 2490 	ret
      000CB5                       2491 00117$:
                                   2492 ;	8052Explorer.c:467: } else if (2 == porta) {
      000CB5 EE               [12] 2493 	mov	a,r6
      000CB6 60 04            [24] 2494 	jz	00114$
                                   2495 ;	8052Explorer.c:468: P2 &= action;
      000CB8 ED               [12] 2496 	mov	a,r5
      000CB9 52 A0            [12] 2497 	anl	_P2,a
      000CBB 22               [24] 2498 	ret
      000CBC                       2499 00114$:
                                   2500 ;	8052Explorer.c:470: P3 &= action;
      000CBC ED               [12] 2501 	mov	a,r5
      000CBD 52 B0            [12] 2502 	anl	_P3,a
      000CBF 22               [24] 2503 	ret
      000CC0                       2504 00132$:
                                   2505 ;	8052Explorer.c:475: action = action << pin;
      000CC0 85*0F F0         [24] 2506 	mov	b,_p_pin_65537_105
      000CC3 05 F0            [12] 2507 	inc	b
      000CC5 74 01            [12] 2508 	mov	a,#0x01
      000CC7 80 02            [24] 2509 	sjmp	00286$
      000CC9                       2510 00284$:
      000CC9 25 E0            [12] 2511 	add	a,acc
      000CCB                       2512 00286$:
      000CCB D5 F0 FB         [24] 2513 	djnz	b,00284$
      000CCE FD               [12] 2514 	mov	r5,a
                                   2515 ;	8052Explorer.c:477: printf_tiny("Setting pin %u of port %u off.\r", pin, porta );
      000CCF C0 07            [24] 2516 	push	ar7
      000CD1 C0 06            [24] 2517 	push	ar6
      000CD3 C0 05            [24] 2518 	push	ar5
      000CD5 C0 03            [24] 2519 	push	ar3
      000CD7 C0 04            [24] 2520 	push	ar4
      000CD9 C0 01            [24] 2521 	push	ar1
      000CDB C0 02            [24] 2522 	push	ar2
      000CDD 74r09            [12] 2523 	mov	a,#___str_103
      000CDF C0 E0            [24] 2524 	push	acc
      000CE1 74s0A            [12] 2525 	mov	a,#(___str_103 >> 8)
      000CE3 C0 E0            [24] 2526 	push	acc
      000CE5 12r00r00         [24] 2527 	lcall	_printf_tiny
      000CE8 E5 81            [12] 2528 	mov	a,sp
      000CEA 24 FA            [12] 2529 	add	a,#0xfa
      000CEC F5 81            [12] 2530 	mov	sp,a
      000CEE D0 05            [24] 2531 	pop	ar5
      000CF0 D0 06            [24] 2532 	pop	ar6
      000CF2 D0 07            [24] 2533 	pop	ar7
                                   2534 ;	8052Explorer.c:478: if (0 == porta) {
      000CF4 EF               [12] 2535 	mov	a,r7
      000CF5 70 04            [24] 2536 	jnz	00129$
                                   2537 ;	8052Explorer.c:479: P0 |= action;
      000CF7 ED               [12] 2538 	mov	a,r5
      000CF8 42 80            [12] 2539 	orl	_P0,a
      000CFA 22               [24] 2540 	ret
      000CFB                       2541 00129$:
                                   2542 ;	8052Explorer.c:480: } else if (1 == porta) {
      000CFB BF 01 04         [24] 2543 	cjne	r7,#0x01,00126$
                                   2544 ;	8052Explorer.c:481: P1 |= action;
      000CFE ED               [12] 2545 	mov	a,r5
      000CFF 42 90            [12] 2546 	orl	_P1,a
      000D01 22               [24] 2547 	ret
      000D02                       2548 00126$:
                                   2549 ;	8052Explorer.c:482: } else if (2 == porta) {
      000D02 EE               [12] 2550 	mov	a,r6
      000D03 60 04            [24] 2551 	jz	00123$
                                   2552 ;	8052Explorer.c:483: P2 |= action;
      000D05 ED               [12] 2553 	mov	a,r5
      000D06 42 A0            [12] 2554 	orl	_P2,a
      000D08 22               [24] 2555 	ret
      000D09                       2556 00123$:
                                   2557 ;	8052Explorer.c:485: P3 |= action;
      000D09 ED               [12] 2558 	mov	a,r5
      000D0A 42 B0            [12] 2559 	orl	_P3,a
      000D0C 22               [24] 2560 	ret
      000D0D                       2561 00135$:
                                   2562 ;	8052Explorer.c:490: puts("Invalid action!");
      000D0D 90r0Ar29         [24] 2563 	mov	dptr,#___str_104
      000D10 75 F0 80         [24] 2564 	mov	b,#0x80
      000D13 02r00r00         [24] 2565 	ljmp	_puts
      000D16                       2566 00139$:
                                   2567 ;	8052Explorer.c:495: puts("the pin 2 is the serial character receive blink.");
      000D16 90r0Ar80         [24] 2568 	mov	dptr,#___str_111
      000D19 75 F0 80         [24] 2569 	mov	b,#0x80
      000D1C 02r00r00         [24] 2570 	ljmp	_puts
      000D1F                       2571 00145$:
                                   2572 ;	8052Explorer.c:498: puts("Sorry the pins 0 and 1 of port 3 are used by serial port.");
      000D1F 90r0Ar39         [24] 2573 	mov	dptr,#___str_108
      000D22 75 F0 80         [24] 2574 	mov	b,#0x80
      000D25 02r00r00         [24] 2575 	ljmp	_puts
      000D28                       2576 00150$:
                                   2577 ;	8052Explorer.c:501: puts("Invalid pin!");
      000D28 90r0Ar73         [24] 2578 	mov	dptr,#___str_109
      000D2B 75 F0 80         [24] 2579 	mov	b,#0x80
                                   2580 ;	8052Explorer.c:503: }
      000D2E 02r00r00         [24] 2581 	ljmp	_puts
                                   2582 ;------------------------------------------------------------
                                   2583 ;Allocation info for local variables in function 'HELP'
                                   2584 ;------------------------------------------------------------
                                   2585 ;	8052Explorer.c:505: void HELP ( void ) {
                                   2586 ;	-----------------------------------------
                                   2587 ;	 function HELP
                                   2588 ;	-----------------------------------------
      000D31                       2589 _HELP:
                                   2590 ;	8052Explorer.c:519: puts("H print this help.");
      000D31 90r0Br12         [24] 2591 	mov	dptr,#___str_128
      000D34 75 F0 80         [24] 2592 	mov	b,#0x80
                                   2593 ;	8052Explorer.c:520: }
      000D37 02r00r00         [24] 2594 	ljmp	_puts
                                   2595 ;------------------------------------------------------------
                                   2596 ;Allocation info for local variables in function 'main'
                                   2597 ;------------------------------------------------------------
                                   2598 ;carattere                 Allocated to registers r6 
                                   2599 ;------------------------------------------------------------
                                   2600 ;	8052Explorer.c:522: void main( void ) {
                                   2601 ;	-----------------------------------------
                                   2602 ;	 function main
                                   2603 ;	-----------------------------------------
      000D3A                       2604 _main:
                                   2605 ;	8052Explorer.c:523: start();
      000D3A 12r0Ar47         [24] 2606 	lcall	_start
                                   2607 ;	8052Explorer.c:524: puts("Insert command, h for help.");
      000D3D 90r0BrF7         [24] 2608 	mov	dptr,#___str_129
      000D40 75 F0 80         [24] 2609 	mov	b,#0x80
      000D43 12r00r00         [24] 2610 	lcall	_puts
                                   2611 ;	8052Explorer.c:526: while( 1 )							// forever.
      000D46                       2612 00127$:
                                   2613 ;	8052Explorer.c:532: if ( ser_byte_avail() )	{				// if data coming in...
      000D46 12r00r00         [24] 2614 	lcall	_ser_byte_avail
      000D49 E5 82            [12] 2615 	mov	a,dpl
      000D4B 60 F9            [24] 2616 	jz	00127$
                                   2617 ;	8052Explorer.c:533: carattere = getchar();
      000D4D 12r00r00         [24] 2618 	lcall	_getchar
      000D50 AE 82            [24] 2619 	mov	r6,dpl
                                   2620 ;	8052Explorer.c:539: if ( carattere >= 0x30 && carattere <= 0x7A ) {
      000D52 BE 30 00         [24] 2621 	cjne	r6,#0x30,00212$
      000D55                       2622 00212$:
      000D55 92*00            [24] 2623 	mov	_main_sloc0_1_0,c
      000D57 40 14            [24] 2624 	jc	00102$
      000D59 EE               [12] 2625 	mov	a,r6
      000D5A 24 85            [12] 2626 	add	a,#0xff - 0x7a
      000D5C 40 0F            [24] 2627 	jc	00102$
                                   2628 ;	8052Explorer.c:540: putchar(carattere);
      000D5E 8E 05            [24] 2629 	mov	ar5,r6
      000D60 7F 00            [12] 2630 	mov	r7,#0x00
      000D62 8D 82            [24] 2631 	mov	dpl,r5
      000D64 8F 83            [24] 2632 	mov	dph,r7
      000D66 C0 06            [24] 2633 	push	ar6
      000D68 12r00r00         [24] 2634 	lcall	_putchar
      000D6B D0 06            [24] 2635 	pop	ar6
      000D6D                       2636 00102$:
                                   2637 ;	8052Explorer.c:542: putchar('\r');
      000D6D 90 00 0D         [24] 2638 	mov	dptr,#0x000d
      000D70 C0 06            [24] 2639 	push	ar6
      000D72 12r00r00         [24] 2640 	lcall	_putchar
      000D75 D0 06            [24] 2641 	pop	ar6
                                   2642 ;	8052Explorer.c:543: switch (carattere)
      000D77 BE 30 02         [24] 2643 	cjne	r6,#0x30,00215$
      000D7A 80 5A            [24] 2644 	sjmp	00112$
      000D7C                       2645 00215$:
      000D7C BE 31 02         [24] 2646 	cjne	r6,#0x31,00216$
      000D7F 80 5D            [24] 2647 	sjmp	00113$
      000D81                       2648 00216$:
      000D81 BE 32 02         [24] 2649 	cjne	r6,#0x32,00217$
      000D84 80 60            [24] 2650 	sjmp	00114$
      000D86                       2651 00217$:
      000D86 BE 33 02         [24] 2652 	cjne	r6,#0x33,00218$
      000D89 80 63            [24] 2653 	sjmp	00115$
      000D8B                       2654 00218$:
      000D8B BE 43 02         [24] 2655 	cjne	r6,#0x43,00219$
      000D8E 80 28            [24] 2656 	sjmp	00105$
      000D90                       2657 00219$:
      000D90 BE 45 02         [24] 2658 	cjne	r6,#0x45,00220$
      000D93 80 2D            [24] 2659 	sjmp	00107$
      000D95                       2660 00220$:
      000D95 BE 48 02         [24] 2661 	cjne	r6,#0x48,00221$
      000D98 80 37            [24] 2662 	sjmp	00111$
      000D9A                       2663 00221$:
      000D9A BE 63 02         [24] 2664 	cjne	r6,#0x63,00222$
      000D9D 80 14            [24] 2665 	sjmp	00104$
      000D9F                       2666 00222$:
      000D9F BE 65 02         [24] 2667 	cjne	r6,#0x65,00223$
      000DA2 80 19            [24] 2668 	sjmp	00106$
      000DA4                       2669 00223$:
      000DA4 BE 66 02         [24] 2670 	cjne	r6,#0x66,00224$
      000DA7 80 1E            [24] 2671 	sjmp	00108$
      000DA9                       2672 00224$:
      000DA9 BE 68 02         [24] 2673 	cjne	r6,#0x68,00225$
      000DAC 80 23            [24] 2674 	sjmp	00111$
      000DAE                       2675 00225$:
                                   2676 ;	8052Explorer.c:545: case 'c':
      000DAE BE 6D 45         [24] 2677 	cjne	r6,#0x6d,00116$
      000DB1 80 19            [24] 2678 	sjmp	00109$
      000DB3                       2679 00104$:
                                   2680 ;	8052Explorer.c:546: dumpCODE();
      000DB3 12r04r1D         [24] 2681 	lcall	_dumpCODE
                                   2682 ;	8052Explorer.c:547: break;
                                   2683 ;	8052Explorer.c:548: case 'C':
      000DB6 80 5D            [24] 2684 	sjmp	00121$
      000DB8                       2685 00105$:
                                   2686 ;	8052Explorer.c:549: hexCODE();
      000DB8 12r08r04         [24] 2687 	lcall	_hexCODE
                                   2688 ;	8052Explorer.c:550: break;
                                   2689 ;	8052Explorer.c:552: case 'e':
      000DBB 80 58            [24] 2690 	sjmp	00121$
      000DBD                       2691 00106$:
                                   2692 ;	8052Explorer.c:553: dumpEEPROM();
      000DBD 12r00r15         [24] 2693 	lcall	_dumpEEPROM
                                   2694 ;	8052Explorer.c:554: break;
                                   2695 ;	8052Explorer.c:555: case 'E':
      000DC0 80 53            [24] 2696 	sjmp	00121$
      000DC2                       2697 00107$:
                                   2698 ;	8052Explorer.c:556: hexEEPROM();
      000DC2 12r01rE2         [24] 2699 	lcall	_hexEEPROM
                                   2700 ;	8052Explorer.c:557: break;
                                   2701 ;	8052Explorer.c:559: case 'f':
      000DC5 80 4E            [24] 2702 	sjmp	00121$
      000DC7                       2703 00108$:
                                   2704 ;	8052Explorer.c:560: felix();
      000DC7 12r00r00         [24] 2705 	lcall	_felix
                                   2706 ;	8052Explorer.c:561: break;
                                   2707 ;	8052Explorer.c:562: case 'm':
      000DCA 80 49            [24] 2708 	sjmp	00121$
      000DCC                       2709 00109$:
                                   2710 ;	8052Explorer.c:563: dumpRAM();
      000DCC 12r06r11         [24] 2711 	lcall	_dumpRAM
                                   2712 ;	8052Explorer.c:564: break;
                                   2713 ;	8052Explorer.c:571: case 'H':
      000DCF 80 44            [24] 2714 	sjmp	00121$
      000DD1                       2715 00111$:
                                   2716 ;	8052Explorer.c:572: HELP();
      000DD1 12r0Dr31         [24] 2717 	lcall	_HELP
                                   2718 ;	8052Explorer.c:573: break;
                                   2719 ;	8052Explorer.c:574: case '0':
      000DD4 80 3F            [24] 2720 	sjmp	00121$
      000DD6                       2721 00112$:
                                   2722 ;	8052Explorer.c:575: p(0);
      000DD6 75 82 00         [24] 2723 	mov	dpl,#0x00
      000DD9 12r0ArFD         [24] 2724 	lcall	_p
                                   2725 ;	8052Explorer.c:576: break;
                                   2726 ;	8052Explorer.c:577: case '1':
      000DDC 80 37            [24] 2727 	sjmp	00121$
      000DDE                       2728 00113$:
                                   2729 ;	8052Explorer.c:578: p(1);
      000DDE 75 82 01         [24] 2730 	mov	dpl,#0x01
      000DE1 12r0ArFD         [24] 2731 	lcall	_p
                                   2732 ;	8052Explorer.c:579: break;
                                   2733 ;	8052Explorer.c:580: case '2':
      000DE4 80 2F            [24] 2734 	sjmp	00121$
      000DE6                       2735 00114$:
                                   2736 ;	8052Explorer.c:581: p(2);
      000DE6 75 82 02         [24] 2737 	mov	dpl,#0x02
      000DE9 12r0ArFD         [24] 2738 	lcall	_p
                                   2739 ;	8052Explorer.c:582: break;
                                   2740 ;	8052Explorer.c:583: case '3':
      000DEC 80 27            [24] 2741 	sjmp	00121$
      000DEE                       2742 00115$:
                                   2743 ;	8052Explorer.c:584: p(3);
      000DEE 75 82 03         [24] 2744 	mov	dpl,#0x03
      000DF1 12r0ArFD         [24] 2745 	lcall	_p
                                   2746 ;	8052Explorer.c:585: break;
                                   2747 ;	8052Explorer.c:586: default:
      000DF4 80 1F            [24] 2748 	sjmp	00121$
      000DF6                       2749 00116$:
                                   2750 ;	8052Explorer.c:587: if ( carattere >= 0x30 && carattere <= 0x7A ) {
      000DF6 20*00 1C         [24] 2751 	jb	_main_sloc0_1_0,00121$
      000DF9 EE               [12] 2752 	mov	a,r6
      000DFA 24 85            [12] 2753 	add	a,#0xff - 0x7a
      000DFC 40 17            [24] 2754 	jc	00121$
                                   2755 ;	8052Explorer.c:588: printf_tiny("Invalid command %c.\r", carattere );
      000DFE 7F 00            [12] 2756 	mov	r7,#0x00
      000E00 C0 06            [24] 2757 	push	ar6
      000E02 C0 07            [24] 2758 	push	ar7
      000E04 74r13            [12] 2759 	mov	a,#___str_130
      000E06 C0 E0            [24] 2760 	push	acc
      000E08 74s0C            [12] 2761 	mov	a,#(___str_130 >> 8)
      000E0A C0 E0            [24] 2762 	push	acc
      000E0C 12r00r00         [24] 2763 	lcall	_printf_tiny
      000E0F E5 81            [12] 2764 	mov	a,sp
      000E11 24 FC            [12] 2765 	add	a,#0xfc
      000E13 F5 81            [12] 2766 	mov	sp,a
                                   2767 ;	8052Explorer.c:591: while ( ser_byte_avail() )	{				// if data coming in...
      000E15                       2768 00121$:
      000E15 12r00r00         [24] 2769 	lcall	_ser_byte_avail
      000E18 E5 82            [12] 2770 	mov	a,dpl
      000E1A 60 05            [24] 2771 	jz	00123$
                                   2772 ;	8052Explorer.c:592: carattere = getchar();
      000E1C 12r00r00         [24] 2773 	lcall	_getchar
      000E1F 80 F4            [24] 2774 	sjmp	00121$
      000E21                       2775 00123$:
                                   2776 ;	8052Explorer.c:594: puts("Insert command, h for help:");
      000E21 90r0Cr28         [24] 2777 	mov	dptr,#___str_131
      000E24 75 F0 80         [24] 2778 	mov	b,#0x80
      000E27 12r00r00         [24] 2779 	lcall	_puts
                                   2780 ;	8052Explorer.c:598: }
      000E2A 02r0Dr46         [24] 2781 	ljmp	00127$
                                   2782 	.area CSEG    (CODE)
                                   2783 	.area CONST   (CODE)
      000000                       2784 _acTestString:
      000000 48 65 6C 6C 6F 20 57  2785 	.ascii "Hello World..."
             6F 72 6C 64 2E 2E 2E
      00000E 0D                    2786 	.db 0x0d
      00000F 54 68 69 73 20 69 73  2787 	.ascii "This is a test string."
             20 61 20 74 65 73 74
             20 73 74 72 69 6E 67
             2E
      000025 0D                    2788 	.db 0x0d
      000026 00                    2789 	.db 0x00
                           000000  2790 _codice	=	0x0000
                                   2791 	.area CONST   (CODE)
      000027                       2792 ___str_64:
      000027 20 20 20 20 20 20 20  2793 	.ascii "              iWs                                 ,W["
             20 20 20 20 20 20 20
             69 57 73 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 2C 57 5B
      00005C 0A                    2794 	.db 0x0a
      00005D 20 20 20 20 20 20 20  2795 	.ascii "              W@@W.                              g@@["
             20 20 20 20 20 20 20
             57 40 40 57 2E 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             67 40 40 5B
      000092 0A                    2796 	.db 0x0a
      000093 20 20 20 20 20 20 20  2797 	.ascii "             i@@@@@s                           g@@@@W"
             20 20 20 20 20 20 69
             40 40 40 40 40 73 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 67 40
             40 40 40 57
      0000C8 0A                    2798 	.db 0x0a
      0000C9 20 20 20 20 20 20 20  2799 	.ascii "             @@@@@@@W.                       ,W@@@@@@"
             20 20 20 20 20 20 40
             40 40 40 40 40 40 57
             2E 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 2C 57 40 40
             40 40 40 40
      0000FE 0A                    2800 	.db 0x0a
      0000FF 20 20 20 20 20 20 20  2801 	.ascii "            ]@@@@@@@@@W.   ,_______.       ,m@@@@@@@@i"
             20 20 20 20 20 5D 40
             40 40 40 40 40 40 40
             40 57 2E 20 20 20 2C
             5F 5F 5F 5F 5F 5F 5F
             2E 20 20 20 20 20 20
             20 2C 6D 40 40 40 40
             40 40 40 40 69
      000135 0A                    2802 	.db 0x0a
      000136 20 20 20 20 20 20 20  2803 	.ascii "           ,@@@@@@@@@@@@W@@@@@@@@@@@@@@mm_g@@@@@@@@@@["
             20 20 20 20 2C 40 40
             40 40 40 40 40 40 40
             40 40 40 57 40 40 40
             40 40 40 40 40 40 40
             40 40 40 40 6D 6D 5F
             67 40 40 40 40 40 40
             40 40 40 40 5B
      00016C 0A                    2804 	.db 0x0a
      00016D 20 20 20 20 20 20 20  2805 	.ascii "           d@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@"
             20 20 20 20 64 40 40
             40 40 40 40 40 40 40
             40 40 40 40 40 40 40
             40 40 40 40 40 40 40
             40 40 40 40 40 40 40
             40 40 40 40 40 40 40
             40 40 40 40 40
      0001A3 0A                    2806 	.db 0x0a
      0001A4 20 20 20 20 20 20 20  2807 	.ascii "          i@@@@@@@A*~~~~~VM@@@@@@@@@@Af~~~~V*@@@@@@@@@i"
             20 20 20 69 40 40 40
             40 40 40 40 41 2A 7E
             7E 7E 7E 7E 56 4D 40
             40 40 40 40 40 40 40
             40 40 41 66 7E 7E 7E
             7E 56 2A 40 40 40 40
             40 40 40 40 40 69
      0001DB 0A                    2808 	.db 0x0a
      0001DC 20 20 20 20 20 20 20  2809 	.ascii "          @@@@@A~          'M@@@@@@A`         'V@@@@@@b"
             20 20 20 40 40 40 40
             40 41 7E 20 20 20 20
             20 20 20 20 20 20 27
             4D 40 40 40 40 40 40
             41 60 20 20 20 20 20
             20 20 20 20 27 56 40
             40 40 40 40 40 62
      000213 0A                    2810 	.db 0x0a
      000214 20 20 20 20 20 20 20  2811 	.ascii "         d@@@*`              Y@@@@f              V@@@@@."
             20 20 64 40 40 40 2A
             60 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 59 40 40 40 40 66
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             56 40 40 40 40 40 2E
      00024C 0A                    2812 	.db 0x0a
      00024D 20 20 20 20 20 20 20  2813 	.ascii "        i@@A`                 M@@P                 V@@@b"
             20 69 40 40 41 60 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 4D 40 40 50 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 56 40 40 40 62
      000285 0A                    2814 	.db 0x0a
      000286 20 20 20 20 20 20 20  2815 	.ascii "       ,@@A                   '@@                   !@@@."
             2C 40 40 41 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 27 40 40 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 21 40 40 40
             2E
      0002BF 0A                    2816 	.db 0x0a
      0002C0 20 20 20 20 20 20 20  2817 	.ascii "       W@P                     @[                    '@@W"
             57 40 50 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 40 5B 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 27 40 40
             57
      0002F9 0A                    2818 	.db 0x0a
      0002FA 20 20 20 20 20 20 64  2819 	.ascii "      d@@            ,         ]!                     ]@@b"
             40 40 20 20 20 20 20
             20 20 20 20 20 20 20
             2C 20 20 20 20 20 20
             20 20 20 5D 21 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 5D 40
             40 62
      000334 0A                    2820 	.db 0x0a
      000335 20 20 20 20 20 67 40  2821 	.ascii "     g@@[          ,W@@s       ]       ,W@@s           @@@i"
             40 5B 20 20 20 20 20
             20 20 20 20 20 2C 57
             40 40 73 20 20 20 20
             20 20 20 5D 20 20 20
             20 20 20 20 2C 57 40
             40 73 20 20 20 20 20
             20 20 20 20 20 20 40
             40 40 69
      000370 0A                    2822 	.db 0x0a
      000371 20 20 20 20 69 40 40  2823 	.ascii "    i@@@[          W@@@@i      ]       W@@@@i          @@@@i"
             40 5B 20 20 20 20 20
             20 20 20 20 20 57 40
             40 40 40 69 20 20 20
             20 20 20 5D 20 20 20
             20 20 20 20 57 40 40
             40 40 69 20 20 20 20
             20 20 20 20 20 20 40
             40 40 40 69
      0003AD 0A                    2824 	.db 0x0a
      0003AE 20 20 20 69 40 40 40  2825 	.ascii "   i@@@@[          @@@@@[      ]       @@@@@[          @@@@@"
             40 5B 20 20 20 20 20
             20 20 20 20 20 40 40
             40 40 40 5B 20 20 20
             20 20 20 5D 20 20 20
             20 20 20 20 40 40 40
             40 40 5B 20 20 20 20
             20 20 20 20 20 20 40
             40 40 40 40
      0003EA 69                    2826 	.ascii "i"
      0003EB 0A                    2827 	.db 0x0a
      0003EC 20 20 67 40 40 40 40  2828 	.ascii "  g@@@@@[          @@@@@!      @[      @@@@@[          @@@@@"
             40 5B 20 20 20 20 20
             20 20 20 20 20 40 40
             40 40 40 21 20 20 20
             20 20 20 40 5B 20 20
             20 20 20 20 40 40 40
             40 40 5B 20 20 20 20
             20 20 20 20 20 20 40
             40 40 40 40
      000428 40 69                 2829 	.ascii "@i"
      00042A 0A                    2830 	.db 0x0a
      00042B 20 64 40 40 40 40 40  2831 	.ascii " d@@@@@@@          !@@@P      iAW      !@@@A          ]@@@@@"
             40 40 20 20 20 20 20
             20 20 20 20 20 21 40
             40 40 50 20 20 20 20
             20 20 69 41 57 20 20
             20 20 20 20 21 40 40
             40 41 20 20 20 20 20
             20 20 20 20 20 5D 40
             40 40 40 40
      000467 40 40 69              2832 	.ascii "@@i"
      00046A 0A                    2833 	.db 0x0a
      00046B 57 40 40 40 40 40 40  2834 	.ascii "W@@@@@@@@b          '~~      ,Z Yi      '~~          ,@@@@@@"
             40 40 62 20 20 20 20
             20 20 20 20 20 20 27
             7E 7E 20 20 20 20 20
             20 2C 5A 20 59 69 20
             20 20 20 20 20 27 7E
             7E 20 20 20 20 20 20
             20 20 20 20 2C 40 40
             40 40 40 40
      0004A7 40 40 40              2835 	.ascii "@@@"
      0004AA 0A                    2836 	.db 0x0a
      0004AB 27 2A 40 40 40 40 40  2837 	.ascii "'*@@@@@@@@s                  Z`  Y.                 ,W@@@@@@"
             40 40 40 73 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 5A 60 20 20 59 2E
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 2C 57 40 40
             40 40 40 40
      0004E7 40 40 41              2838 	.ascii "@@A"
      0004EA 0A                    2839 	.db 0x0a
      0004EB 20 20 27 4D 40 40 40  2840 	.ascii "  'M@@@*f**W.              ,Z     Vs               ,W*~~~M@@"
             2A 66 2A 2A 57 2E 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 2C
             5A 20 20 20 20 20 56
             73 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 2C 57 2A 7E 7E
             7E 4D 40 40
      000527 40 66                 2841 	.ascii "@f"
      000529 0A                    2842 	.db 0x0a
      00052A 20 20 20 20 27 4D 40  2843 	.ascii "    'M@    'Vs.          ,z~       'N_           ,Z~     d@P"
             20 20 20 20 27 56 73
             2E 20 20 20 20 20 20
             20 20 20 20 2C 7A 7E
             20 20 20 20 20 20 20
             27 4E 5F 20 20 20 20
             20 20 20 20 20 20 20
             2C 5A 7E 20 20 20 20
             20 64 40 50
      000566 0A                    2844 	.db 0x0a
      000567 20 20 20 4D 40 40 40  2845 	.ascii "   M@@@       ~-__  __z/` ,gmW@@mm_ '+e_.   __=/`      ,@@@@"
             20 20 20 20 20 20 20
             7E 2D 5F 5F 20 20 5F
             5F 7A 2F 60 20 2C 67
             6D 57 40 40 6D 6D 5F
             20 27 2B 65 5F 2E 20
             20 20 5F 5F 3D 2F 60
             20 20 20 20 20 20 2C
             40 40 40 40
      0005A3 0A                    2846 	.db 0x0a
      0005A4 20 20 20 20 27 56 4D  2847 	.ascii "    'VMW                  g@@@@@@@@@W     ~~~          ,WAf"
             57 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 67 40
             40 40 40 40 40 40 40
             40 57 20 20 20 20 20
             7E 7E 7E 20 20 20 20
             20 20 20 20 20 20 2C
             57 41 66
      0005DF 0A                    2848 	.db 0x0a
      0005E0 20 20 20 20 20 20 20  2849 	.ascii "       ~N.                @@@@@@@@@@@!                ,Z`"
             7E 4E 2E 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 40 40
             40 40 40 40 40 40 40
             40 40 21 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 2C 5A
             60
      000619 0A                    2850 	.db 0x0a
      00061A 20 20 20 20 20 20 20  2851 	.ascii "         V.               !M@@@@@@@@f                gf-"
             20 20 56 2E 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 21 4D
             40 40 40 40 40 40 40
             40 66 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 67 66 2D
      000652 0A                    2852 	.db 0x0a
      000653 20 20 20 20 20 20 20  2853 	.ascii "          'N.               '~***f~                ,Z`"
             20 20 20 27 4E 2E 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             27 7E 2A 2A 2A 66 7E
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 2C 5A 60
      000689 0A                    2854 	.db 0x0a
      00068A 20 20 20 20 20 20 20  2855 	.ascii "            Vc.                                  _Zf"
             20 20 20 20 20 56 63
             2E 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             5F 5A 66
      0006BE 0A                    2856 	.db 0x0a
      0006BF 20 20 20 20 20 20 20  2857 	.ascii "              ~e_                             ,gY~"
             20 20 20 20 20 20 20
             7E 65 5F 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 2C 67 59
             7E
      0006F1 0A                    2858 	.db 0x0a
      0006F2 20 20 20 20 20 20 20  2859 	.ascii "                'V=_          -@@D         ,gY~ '"
             20 20 20 20 20 20 20
             20 20 27 56 3D 5F 20
             20 20 20 20 20 20 20
             20 20 2D 40 40 44 20
             20 20 20 20 20 20 20
             20 2C 67 59 7E 20 27
      000723 0A                    2860 	.db 0x0a
      000724 20 20 20 20 20 20 20  2861 	.ascii "                    ~=__.           ,__z=~`"
             20 20 20 20 20 20 20
             20 20 20 20 20 20 7E
             3D 5F 5F 2E 20 20 20
             20 20 20 20 20 20 20
             20 2C 5F 5F 7A 3D 7E
             60
      00074F 0A                    2862 	.db 0x0a
      000750 20 20 20 20 20 20 20  2863 	.ascii "                         '~~~*==Y*f~~~ "
             20 20 20 20 20 20 20
             20 20 20 20 20 20 20
             20 20 20 20 27 7E 7E
             7E 2A 3D 3D 59 2A 66
             7E 7E 7E 20
      000777 00                    2864 	.db 0x00
                                   2865 	.area CSEG    (CODE)
                                   2866 	.area CONST   (CODE)
      000778                       2867 ___str_65:
      000778 44 75 6D 70 69 6E 67  2868 	.ascii "Dumping eeprom content and changing first character:"
             20 65 65 70 72 6F 6D
             20 63 6F 6E 74 65 6E
             74 20 61 6E 64 20 63
             68 61 6E 67 69 6E 67
             20 66 69 72 73 74 20
             63 68 61 72 61 63 74
             65 72 3A
      0007AC 00                    2869 	.db 0x00
                                   2870 	.area CSEG    (CODE)
                                   2871 	.area CONST   (CODE)
      0007AD                       2872 ___str_66:
      0007AD 30 30 30 25 78 20 20  2873 	.ascii "000%x  "
      0007B4 00                    2874 	.db 0x00
                                   2875 	.area CSEG    (CODE)
                                   2876 	.area CONST   (CODE)
      0007B5                       2877 ___str_67:
      0007B5 30 30 25 78 20 20     2878 	.ascii "00%x  "
      0007BB 00                    2879 	.db 0x00
                                   2880 	.area CSEG    (CODE)
                                   2881 	.area CONST   (CODE)
      0007BC                       2882 ___str_68:
      0007BC 30 25 78 20 20        2883 	.ascii "0%x  "
      0007C1 00                    2884 	.db 0x00
                                   2885 	.area CSEG    (CODE)
                                   2886 	.area CONST   (CODE)
      0007C2                       2887 ___str_69:
      0007C2 25 78 20 20           2888 	.ascii "%x  "
      0007C6 00                    2889 	.db 0x00
                                   2890 	.area CSEG    (CODE)
                                   2891 	.area CONST   (CODE)
      0007C7                       2892 ___str_70:
      0007C7 25 78 20              2893 	.ascii "%x "
      0007CA 00                    2894 	.db 0x00
                                   2895 	.area CSEG    (CODE)
                                   2896 	.area CONST   (CODE)
      0007CB                       2897 ___str_71:
      0007CB 20 7C                 2898 	.ascii " |"
      0007CD 00                    2899 	.db 0x00
                                   2900 	.area CSEG    (CODE)
                                   2901 	.area CONST   (CODE)
      0007CE                       2902 ___str_72:
      0007CE 25 63                 2903 	.ascii "%c"
      0007D0 00                    2904 	.db 0x00
                                   2905 	.area CSEG    (CODE)
                                   2906 	.area CONST   (CODE)
      0007D1                       2907 ___str_73:
      0007D1 44 75 6D 70 69 6E 67  2908 	.ascii "Dumping eeprom content in hex format:"
             20 65 65 70 72 6F 6D
             20 63 6F 6E 74 65 6E
             74 20 69 6E 20 68 65
             78 20 66 6F 72 6D 61
             74 3A
      0007F6 00                    2909 	.db 0x00
                                   2910 	.area CSEG    (CODE)
                                   2911 	.area CONST   (CODE)
      0007F7                       2912 ___str_74:
      0007F7 3A 31 30              2913 	.ascii ":10"
      0007FA 00                    2914 	.db 0x00
                                   2915 	.area CSEG    (CODE)
                                   2916 	.area CONST   (CODE)
      0007FB                       2917 ___str_75:
      0007FB 30 30 30 25 78        2918 	.ascii "000%x"
      000800 00                    2919 	.db 0x00
                                   2920 	.area CSEG    (CODE)
                                   2921 	.area CONST   (CODE)
      000801                       2922 ___str_76:
      000801 30 30 25 78           2923 	.ascii "00%x"
      000805 00                    2924 	.db 0x00
                                   2925 	.area CSEG    (CODE)
                                   2926 	.area CONST   (CODE)
      000806                       2927 ___str_77:
      000806 30 25 78              2928 	.ascii "0%x"
      000809 00                    2929 	.db 0x00
                                   2930 	.area CSEG    (CODE)
                                   2931 	.area CONST   (CODE)
      00080A                       2932 ___str_78:
      00080A 25 78                 2933 	.ascii "%x"
      00080C 00                    2934 	.db 0x00
                                   2935 	.area CSEG    (CODE)
                                   2936 	.area CONST   (CODE)
      00080D                       2937 ___str_79:
      00080D 30 30                 2938 	.ascii "00"
      00080F 00                    2939 	.db 0x00
                                   2940 	.area CSEG    (CODE)
                                   2941 	.area CONST   (CODE)
      000810                       2942 ___str_80:
      000810 25 78                 2943 	.ascii "%x"
      000812 0D                    2944 	.db 0x0d
      000813 00                    2945 	.db 0x00
                                   2946 	.area CSEG    (CODE)
                                   2947 	.area CONST   (CODE)
      000814                       2948 ___str_81:
      000814 25 73                 2949 	.ascii "%s"
      000816 00                    2950 	.db 0x00
                                   2951 	.area CSEG    (CODE)
                                   2952 	.area CONST   (CODE)
      000817                       2953 ___str_82:
      000817 3A 30 30 30 30 30 30  2954 	.ascii ":00000001FF"
             30 31 46 46
      000822 00                    2955 	.db 0x00
                                   2956 	.area CSEG    (CODE)
                                   2957 	.area CONST   (CODE)
      000823                       2958 ___str_83:
      000823 44 75 6D 70 69 6E 67  2959 	.ascii "Dumping code:"
             20 63 6F 64 65 3A
      000830 00                    2960 	.db 0x00
                                   2961 	.area CSEG    (CODE)
                                   2962 	.area CONST   (CODE)
      000831                       2963 ___str_84:
      000831 44 75 6D 70 69 6E 67  2964 	.ascii "Dumping ram memory:"
             20 72 61 6D 20 6D 65
             6D 6F 72 79 3A
      000844 00                    2965 	.db 0x00
                                   2966 	.area CSEG    (CODE)
                                   2967 	.area CONST   (CODE)
      000845                       2968 ___str_85:
      000845 44 75 6D 70 69 6E 67  2969 	.ascii "Dumping code in hex file format:"
             20 63 6F 64 65 20 69
             6E 20 68 65 78 20 66
             69 6C 65 20 66 6F 72
             6D 61 74 3A
      000865 00                    2970 	.db 0x00
                                   2971 	.area CSEG    (CODE)
                                   2972 	.area CONST   (CODE)
      000866                       2973 ___str_86:
      000866 52 65 73 65 74 74 69  2974 	.ascii "Resetting the micro."
             6E 67 20 74 68 65 20
             6D 69 63 72 6F 2E
      00087A 00                    2975 	.db 0x00
                                   2976 	.area CSEG    (CODE)
                                   2977 	.area CONST   (CODE)
      00087B                       2978 ___str_87:
      00087B 43 70 75 20 25 73 20  2979 	.ascii "Cpu %s running at %sMHz"
             72 75 6E 6E 69 6E 67
             20 61 74 20 25 73 4D
             48 7A
      000892 0D                    2980 	.db 0x0d
      000893 00                    2981 	.db 0x00
                                   2982 	.area CSEG    (CODE)
                                   2983 	.area CONST   (CODE)
      000894                       2984 ___str_88:
      000894 38 39 53 38 32 35 32  2985 	.ascii "89S8252"
      00089B 00                    2986 	.db 0x00
                                   2987 	.area CSEG    (CODE)
                                   2988 	.area CONST   (CODE)
      00089C                       2989 ___str_89:
      00089C 31 31 2E 30 35 39 32  2990 	.ascii "11.0592"
      0008A3 00                    2991 	.db 0x00
                                   2992 	.area CSEG    (CODE)
                                   2993 	.area CONST   (CODE)
      0008A4                       2994 ___str_90:
      0008A4 53 74 61 72 74 65 64  2995 	.ascii "Started timer 2 with th = %x and tl = %x"
             20 74 69 6D 65 72 20
             32 20 77 69 74 68 20
             74 68 20 3D 20 25 78
             20 61 6E 64 20 74 6C
             20 3D 20 25 78
      0008CC 0D                    2996 	.db 0x0d
      0008CD 00                    2997 	.db 0x00
                                   2998 	.area CSEG    (CODE)
                                   2999 	.area CONST   (CODE)
      0008CE                       3000 ___str_91:
      0008CE 53 74 61 72 74 65 64  3001 	.ascii "Started serial at %s bps"
             20 73 65 72 69 61 6C
             20 61 74 20 25 73 20
             62 70 73
      0008E6 0D                    3002 	.db 0x0d
      0008E7 00                    3003 	.db 0x00
                                   3004 	.area CSEG    (CODE)
                                   3005 	.area CONST   (CODE)
      0008E8                       3006 ___str_92:
      0008E8 31 31 35 32 30 30     3007 	.ascii "115200"
      0008EE 00                    3008 	.db 0x00
                                   3009 	.area CSEG    (CODE)
                                   3010 	.area CONST   (CODE)
      0008EF                       3011 ___str_93:
      0008EF 53 74 61 72 74 65 64  3012 	.ascii "Started timer 0 with th = %x and tl = %x"
             20 74 69 6D 65 72 20
             30 20 77 69 74 68 20
             74 68 20 3D 20 25 78
             20 61 6E 64 20 74 6C
             20 3D 20 25 78
      000917 0D                    3013 	.db 0x0d
      000918 00                    3014 	.db 0x00
                                   3015 	.area CSEG    (CODE)
                                   3016 	.area CONST   (CODE)
      000919                       3017 ___str_96:
      000919 48 65 6C 6C 6F 20 57  3018 	.ascii "Hello World..."
             6F 72 6C 64 2E 2E 2E
      000927 0D                    3019 	.db 0x0d
      000928 54 68 69 73 20 69 73  3020 	.ascii "This is a test string."
             20 61 20 74 65 73 74
             20 73 74 72 69 6E 67
             2E
      00093E 0A                    3021 	.db 0x0a
      00093F 50 72 69 6E 74 20 61  3022 	.ascii "Print a string from code memory:"
             20 73 74 72 69 6E 67
             20 66 72 6F 6D 20 63
             6F 64 65 20 6D 65 6D
             6F 72 79 3A
      00095F 00                    3023 	.db 0x00
                                   3024 	.area CSEG    (CODE)
                                   3025 	.area CONST   (CODE)
      000960                       3026 ___str_97:
      000960 57 68 69 63 68 20 70  3027 	.ascii "Which pin from 2 to 7 of port %u?"
             69 6E 20 66 72 6F 6D
             20 32 20 74 6F 20 37
             20 6F 66 20 70 6F 72
             74 20 25 75 3F
      000981 0D                    3028 	.db 0x0d
      000982 00                    3029 	.db 0x00
                                   3030 	.area CSEG    (CODE)
                                   3031 	.area CONST   (CODE)
      000983                       3032 ___str_98:
      000983 57 68 69 63 68 20 70  3033 	.ascii "Which pin from 3 to 7 of port %u?"
             69 6E 20 66 72 6F 6D
             20 33 20 74 6F 20 37
             20 6F 66 20 70 6F 72
             74 20 25 75 3F
      0009A4 0D                    3034 	.db 0x0d
      0009A5 00                    3035 	.db 0x00
                                   3036 	.area CSEG    (CODE)
                                   3037 	.area CONST   (CODE)
      0009A6                       3038 ___str_99:
      0009A6 57 68 69 63 68 20 70  3039 	.ascii "Which pin from 0 to 7 of port %u?"
             69 6E 20 66 72 6F 6D
             20 30 20 74 6F 20 37
             20 6F 66 20 70 6F 72
             74 20 25 75 3F
      0009C7 0D                    3040 	.db 0x0d
      0009C8 00                    3041 	.db 0x00
                                   3042 	.area CSEG    (CODE)
                                   3043 	.area CONST   (CODE)
      0009C9                       3044 ___str_100:
      0009C9 50 69 6E 20 25 75 20  3045 	.ascii "Pin %u of port %u: "
             6F 66 20 70 6F 72 74
             20 25 75 3A 20
      0009DC 00                    3046 	.db 0x00
                                   3047 	.area CSEG    (CODE)
                                   3048 	.area CONST   (CODE)
      0009DD                       3049 ___str_101:
      0009DD 30 20 6F 66 66 2C 20  3050 	.ascii "0 off, 1 on."
             31 20 6F 6E 2E
      0009E9 00                    3051 	.db 0x00
                                   3052 	.area CSEG    (CODE)
                                   3053 	.area CONST   (CODE)
      0009EA                       3054 ___str_102:
      0009EA 53 65 74 74 69 6E 67  3055 	.ascii "Setting pin %u of port %u on."
             20 70 69 6E 20 25 75
             20 6F 66 20 70 6F 72
             74 20 25 75 20 6F 6E
             2E
      000A07 0D                    3056 	.db 0x0d
      000A08 00                    3057 	.db 0x00
                                   3058 	.area CSEG    (CODE)
                                   3059 	.area CONST   (CODE)
      000A09                       3060 ___str_103:
      000A09 53 65 74 74 69 6E 67  3061 	.ascii "Setting pin %u of port %u off."
             20 70 69 6E 20 25 75
             20 6F 66 20 70 6F 72
             74 20 25 75 20 6F 66
             66 2E
      000A27 0D                    3062 	.db 0x0d
      000A28 00                    3063 	.db 0x00
                                   3064 	.area CSEG    (CODE)
                                   3065 	.area CONST   (CODE)
      000A29                       3066 ___str_104:
      000A29 49 6E 76 61 6C 69 64  3067 	.ascii "Invalid action!"
             20 61 63 74 69 6F 6E
             21
      000A38 00                    3068 	.db 0x00
                                   3069 	.area CSEG    (CODE)
                                   3070 	.area CONST   (CODE)
      000A39                       3071 ___str_108:
      000A39 53 6F 72 72 79 20 74  3072 	.ascii "Sorry the pins 0 and 1 of port 3 are used by serial port."
             68 65 20 70 69 6E 73
             20 30 20 61 6E 64 20
             31 20 6F 66 20 70 6F
             72 74 20 33 20 61 72
             65 20 75 73 65 64 20
             62 79 20 73 65 72 69
             61 6C 20 70 6F 72 74
             2E
      000A72 00                    3073 	.db 0x00
                                   3074 	.area CSEG    (CODE)
                                   3075 	.area CONST   (CODE)
      000A73                       3076 ___str_109:
      000A73 49 6E 76 61 6C 69 64  3077 	.ascii "Invalid pin!"
             20 70 69 6E 21
      000A7F 00                    3078 	.db 0x00
                                   3079 	.area CSEG    (CODE)
                                   3080 	.area CONST   (CODE)
      000A80                       3081 ___str_111:
      000A80 53 6F 72 72 79 20 74  3082 	.ascii "Sorry the pin 0 on port 2 is the blinking led,"
             68 65 20 70 69 6E 20
             30 20 6F 6E 20 70 6F
             72 74 20 32 20 69 73
             20 74 68 65 20 62 6C
             69 6E 6B 69 6E 67 20
             6C 65 64 2C
      000AAE 0A                    3083 	.db 0x0a
      000AAF 74 68 65 20 70 69 6E  3084 	.ascii "the pin 1 is the serial character transmit blink,"
             20 31 20 69 73 20 74
             68 65 20 73 65 72 69
             61 6C 20 63 68 61 72
             61 63 74 65 72 20 74
             72 61 6E 73 6D 69 74
             20 62 6C 69 6E 6B 2C
      000AE0 0A                    3085 	.db 0x0a
      000AE1 74 68 65 20 70 69 6E  3086 	.ascii "the pin 2 is the serial character receive blink."
             20 32 20 69 73 20 74
             68 65 20 73 65 72 69
             61 6C 20 63 68 61 72
             61 63 74 65 72 20 72
             65 63 65 69 76 65 20
             62 6C 69 6E 6B 2E
      000B11 00                    3087 	.db 0x00
                                   3088 	.area CSEG    (CODE)
                                   3089 	.area CONST   (CODE)
      000B12                       3090 ___str_128:
      000B12 41 76 61 69 6C 61 62  3091 	.ascii "Available comamnds are:"
             6C 65 20 63 6F 6D 61
             6D 6E 64 73 20 61 72
             65 3A
      000B29 0A                    3092 	.db 0x0a
      000B2A 30 2C 20 31 2C 20 32  3093 	.ascii "0, 1, 2 or 3 to change pin ports status."
             20 6F 72 20 33 20 74
             6F 20 63 68 61 6E 67
             65 20 70 69 6E 20 70
             6F 72 74 73 20 73 74
             61 74 75 73 2E
      000B52 0A                    3094 	.db 0x0a
      000B53 63 20 64 75 6D 70 20  3095 	.ascii "c dump code memory."
             63 6F 64 65 20 6D 65
             6D 6F 72 79 2E
      000B66 0A                    3096 	.db 0x0a
      000B67 43 20 64 75 6D 70 20  3097 	.ascii "C dump code memory in hex format."
             63 6F 64 65 20 6D 65
             6D 6F 72 79 20 69 6E
             20 68 65 78 20 66 6F
             72 6D 61 74 2E
      000B88 0A                    3098 	.db 0x0a
      000B89 65 20 64 75 6D 70 20  3099 	.ascii "e dump eeprom memory."
             65 65 70 72 6F 6D 20
             6D 65 6D 6F 72 79 2E
      000B9E 0A                    3100 	.db 0x0a
      000B9F 45 20 64 75 6D 70 20  3101 	.ascii "E dump eeprom memory in hex format."
             65 65 70 72 6F 6D 20
             6D 65 6D 6F 72 79 20
             69 6E 20 68 65 78 20
             66 6F 72 6D 61 74 2E
      000BC2 0A                    3102 	.db 0x0a
      000BC3 6D 20 64 75 6D 70 20  3103 	.ascii "m dump ram memory."
             72 61 6D 20 6D 65 6D
             6F 72 79 2E
      000BD5 0A                    3104 	.db 0x0a
      000BD6 66 20 70 72 69 6E 74  3105 	.ascii "f print felix"
             20 66 65 6C 69 78
      000BE3 0A                    3106 	.db 0x0a
      000BE4 48 20 70 72 69 6E 74  3107 	.ascii "H print this help."
             20 74 68 69 73 20 68
             65 6C 70 2E
      000BF6 00                    3108 	.db 0x00
                                   3109 	.area CSEG    (CODE)
                                   3110 	.area CONST   (CODE)
      000BF7                       3111 ___str_129:
      000BF7 49 6E 73 65 72 74 20  3112 	.ascii "Insert command, h for help."
             63 6F 6D 6D 61 6E 64
             2C 20 68 20 66 6F 72
             20 68 65 6C 70 2E
      000C12 00                    3113 	.db 0x00
                                   3114 	.area CSEG    (CODE)
                                   3115 	.area CONST   (CODE)
      000C13                       3116 ___str_130:
      000C13 49 6E 76 61 6C 69 64  3117 	.ascii "Invalid command %c."
             20 63 6F 6D 6D 61 6E
             64 20 25 63 2E
      000C26 0D                    3118 	.db 0x0d
      000C27 00                    3119 	.db 0x00
                                   3120 	.area CSEG    (CODE)
                                   3121 	.area CONST   (CODE)
      000C28                       3122 ___str_131:
      000C28 49 6E 73 65 72 74 20  3123 	.ascii "Insert command, h for help:"
             63 6F 6D 6D 61 6E 64
             2C 20 68 20 66 6F 72
             20 68 65 6C 70 3A
      000C43 00                    3124 	.db 0x00
                                   3125 	.area CSEG    (CODE)
                                   3126 	.area XINIT   (CODE)
                                   3127 	.area CABS    (ABS,CODE)
